{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#operas-metrics-portal","title":"OPERAS Metrics Portal","text":"<p>This site serves as an entry point to those interested in how the HIRMEOS project collects usage and alternative metrics for Open Access publications, the motivation behind this project, and how you may implement our Open Source code in your own platform.</p> <p>Getting Started Check out how you can start implementing our code in your platform</p> <p>Measures Browse the full list of measures to see how we generate our metrics.</p> Getting Started <p>Check out how you can start implementing our code in your platform</p> Get started! Measures <p>Browse the full list of measures to see how we generate our metrics.</p> Browse Our Principles <p>Find out the main motivations behind the design of our software.</p> Read more"},{"location":"measures/","title":"<i class=\"fa-solid fa-chart-line\"></i>&nbsp;&nbsp;Measures","text":"Measure Link Namespace Path Source Type Version Google Books https://metrics.operas-eu.org google-books/views/v1 Google Books views 1 Open Book Publishers HTML Reader https://metrics.operas-eu.org obp-html/sessions/v1 Open Book Publishers HTML Reader sessions 1 Open Book Publishers PDF Reader https://metrics.operas-eu.org obp-pdf/sessions/v1 Open Book Publishers PDF Reader sessions 1 Open Book Publishers https://metrics.operas-eu.org obp/downloads/v1 Open Book Publishers downloads 1 World Reader https://metrics.operas-eu.org world-reader/users/v1 World Reader users 1 Open Edition Views https://metrics.operas-eu.org open-edition/views/v1 Open Edition views 1 Open Edition Downloads https://metrics.operas-eu.org open-edition/downloads/v1 Open Edition downloads 1 OAPEN https://metrics.operas-eu.org oapen/downloads/v1 OAPEN downloads 1 JSTOR Views https://metrics.operas-eu.org jstor/views/v1 JSTOR views 1 JSTOR Downloads https://metrics.operas-eu.org jstor/downloads/v1 JSTOR downloads 1 The Classics Library https://metrics.operas-eu.org classics-library/sessions/v1 The Classics Library sessions 1 Unglue.it https://metrics.operas-eu.org unglueit/downloads/v1 Unglue.it downloads 1 OpenAIRE https://metrics.operas-eu.org openaire/downloads/v1 OpenAIRE downloads 1 IRUS-UK https://metrics.operas-eu.org irusuk/downloads/v1 IRUS-UK downloads 1 Wikimedia https://metrics.operas-eu.org wikimedia/views/v1 Wikimedia views 1 SUB G\u00f6ttingen https://metrics.operas-eu.org sub-gottingen/downloads/v1 SUB G\u00f6ttingen downloads 1 \u0395\u03b8\u03bd\u03b9\u03ba\u03cc \u039a\u03ad\u03bd\u03c4\u03c1\u03bf \u03a4\u03b5\u03ba\u03bc\u03b7\u03c1\u03af\u03c9\u03c3\u03b7\u03c2 Downloads https://metrics.operas-eu.org ekt/downloads/v1 \u0395\u03b8\u03bd\u03b9\u03ba\u03cc \u039a\u03ad\u03bd\u03c4\u03c1\u03bf \u03a4\u03b5\u03ba\u03bc\u03b7\u03c1\u03af\u03c9\u03c3\u03b7\u03c2 downloads 1 \u0395\u03b8\u03bd\u03b9\u03ba\u03cc \u039a\u03ad\u03bd\u03c4\u03c1\u03bf \u03a4\u03b5\u03ba\u03bc\u03b7\u03c1\u03af\u03c9\u03c3\u03b7\u03c2 Sessions https://metrics.operas-eu.org ekt/sessions/v1 \u0395\u03b8\u03bd\u03b9\u03ba\u03cc \u039a\u03ad\u03bd\u03c4\u03c1\u03bf \u03a4\u03b5\u03ba\u03bc\u03b7\u03c1\u03af\u03c9\u03c3\u03b7\u03c2 sessions 1 \u0395\u03b8\u03bd\u03b9\u03ba\u03cc \u039a\u03ad\u03bd\u03c4\u03c1\u03bf \u03a4\u03b5\u03ba\u03bc\u03b7\u03c1\u03af\u03c9\u03c3\u03b7\u03c2 Landing Sessions https://metrics.operas-eu.org ekt/landingsessions/v1 \u0395\u03b8\u03bd\u03b9\u03ba\u03cc \u039a\u03ad\u03bd\u03c4\u03c1\u03bf \u03a4\u03b5\u03ba\u03bc\u03b7\u03c1\u03af\u03c9\u03c3\u03b7\u03c2 landingsessions 1 Twitter https://metrics.operas-eu.org twitter/tweets/v1 Twitter tweets 1 Hypothes.is https://metrics.operas-eu.org hypothesis/annotations/v1 Hypothes.is annotations 1 Wikipedia https://metrics.operas-eu.org wikipedia/references/v1 Wikipedia references 1 Wordpress https://metrics.operas-eu.org wordpress/references/v1 Wordpress references 1 Ubiquity Press Sessions https://metrics.operas-eu.org up-logs/sessions/v1 Ubiquity Press sessions 1 Ubiquity Press Sessions (GA) https://metrics.operas-eu.org up-ga/sessions/v1 Ubiquity Press sessions 1 Ubiquity Press Downloads https://metrics.operas-eu.org up-logs/downloads/v1 Ubiquity Press downloads 1 Ubiquity Press Downloads (GA) https://metrics.operas-eu.org up-ga/downloads/v1 Ubiquity Press downloads 1 Ubiquity Press Reads https://metrics.operas-eu.org up-logs/reads/v1 Ubiquity Press reads 1 Ubiquity Press Reads (GA) https://metrics.operas-eu.org up-ga/reads/v1 Ubiquity Press reads 1 Figshare Reads https://metrics.operas-eu.org figshare/views/v1 Figshare views 1 Figshare Downloads https://metrics.operas-eu.org figshare/downloads/v1 Figshare downloads 1 Figshare Shares https://metrics.operas-eu.org figshare/shares/v1 Figshare shares 1"},{"location":"policy/","title":"Policy","text":""},{"location":"policy/#acceptable-use-policy-and-conditions-of-use","title":"Acceptable Use Policy and Conditions of Use","text":"<p>This Acceptable Use Policy and Conditions of Use (\u201cAUP\u201d) defines the rules and conditions that govern your access to and use (including transmission, processing, and storage of data) of the resources and services (\u201cServices\u201d) as granted by OPERAS for the purpose of measuring Metrics and Altmetrics of books hosted on various Open Access platforms.</p> <ol> <li>You shall only use the Services in a manner consistent with the purposes and limitations described above; you shall show consideration towards other users including by not causing harm to the Services; you have an obligation to collaborate in the resolution of issues arising from your use of the Services.</li> <li>You shall only use the Services for lawful purposes and not breach, attempt to breach, nor circumvent administrative or security controls.</li> <li>You shall respect intellectual property and confidentiality agreements.</li> <li>You shall protect your access credentials (e.g. passwords, private keys or multi-factor tokens); no intentional sharing is permitted.</li> <li>You shall keep your registered information correct and up to date.</li> <li>You shall promptly report known or suspected security breaches, credential compromise, or misuse to the security contact stated below; and report any compromised credentials to the relevant issuing authorities.</li> <li>Reliance on the Services shall only be to the extent specified by any applicable service level agreements listed below. Use without such agreements is at your own risk.</li> <li>Your personal data will be processed in accordance with the privacy statements referenced below.</li> <li>Your use of the Services may be restricted or suspended, for administrative, operational, or security reasons, without prior notice and without compensation.</li> <li>If you violate these rules, you may be liable for the consequences, which may include your account being suspended and a report being made to your home organisation or to law enforcement. The administrative contact for this AUP is: metrics-service_at_operas-eu.org</li> </ol> <p>The security contact for this AUP is: technical-support_at_operas.eu-org</p> <p>The privacy statements are located at: https://metrics.operas-eu.org/privacy-policy</p> <p>This AUP is based on 'AARC-I044: Implementers Guide to the WISE Baseline Acceptable Use Policy'</p>"},{"location":"principles/","title":"<i class=\"fa-sharp-duotone fa-solid fa-heart\"></i>&nbsp;&nbsp;Our Principles","text":"<p>Very few efforts have been made towards achieving a comprehensive and transparent mechanism to collect and aggregate usage metrics. Most platforms are limited to collecting their own usage, while many do not even comprehend the complexity of the matter. The HIRMEOS project poses a ground breaking approach that enables metrics collection and aggregation from third party platforms, which is currently a manual job for many scholarly publishers that lack the funds to find a technical solution to the problem.</p> <p>While many argue that third-party metrics should not be collected until platforms achieve a uniform collection and reporting mechanism, HIRMEOS partners acknowledge the need for authors, publishers, and authors, to have access to data \u2013 and that a unique collection mechanism must not be imposed upon the community. For this reason, we have designed a simple standard that allows easy cross-platform analysis through transparent tagging of data to its definition.</p> <p>We strive to provide the community with open tools that allow easy data collection and distribution, maintaining at all times a high level of transparency of the process used, and making sure that users consuming such data are aware of its origin and meaning.</p> <p>All our data is, therefore, tagged using a URL of the form domain + platform + type + revision (e.g. metrics.operas-eu.org/obp-html/sessions/v1) that links to a user-friendly definition of the metric in question.</p>"},{"location":"measures/measure/","title":"Measure","text":"<p>Description:</p>"},{"location":"metrics-docs/access-logs-local.en-GB/","title":"Access Logs Driver","text":"<p>Install the driver as a package from PyPI by visiting the following link on pypi.</p> <p>The driver reads through the server logs of your web application to calculate the number of visits to pages on the site. It determines unique users based on IP address, and excludes known bots from any metrics counts. The URL patterns are also used to determine the type of metrics (views, downloads, etc.)</p> <p>We strip out entries where the same (IP address * user agent) pair has accessed a URL within the last <code>session_timeout</code> (e.g. half-hour)</p>"},{"location":"metrics-docs/access-logs-local.en-GB/#plugin-variables-description","title":"Plugin Variables Description","text":"Variable Description <code>active</code> The plugin will not run if this is set to false, boolean. <code>start_date</code> The date that you want to first pull results the first time the plugin runs, a string. <code>uri_scheme</code> Uri scheme to save results against, string. <code>measure_regexes</code> List of dictionaries containing name, measure_uri and regex as list, for each measure. <code>excluded_ips</code> List of IP addresses to exclude. <code>excluded_urls</code> List of URLs  to exclude. <code>logdir</code> Path to the directory containing the logs, string. <code>url_prefix</code> URL prefix of your website, string. <code>session_timeout</code> Length of session, in seconds, int. <code>rollover</code> Extend session if new requests occur within the timeout window, boolean. <p>Example configuration file:</p> <p>Please refer to the metrics drivers wrapper for an example configuration file.</p>"},{"location":"metrics-docs/altmetrics.en-GB/","title":"Altmetrics","text":""},{"location":"metrics-docs/altmetrics.en-GB/#setting-up-your-user-account","title":"Setting up your user account","text":"<p>You can register for an account at https://altmetrics.operas-eu.org/register.</p> <p>You will be sent a an email asking you to confirm the email address you supplied. Click on the link given in this email.</p> <p>To prevent unwanted traffic on the metrics API we will need to approve your account before you can use the service. Once a site admin has approved your account will receive an email letting you know that you may use the Altmetrics service.</p>"},{"location":"metrics-docs/altmetrics.en-GB/#using-the-api","title":"Using the API","text":""},{"location":"metrics-docs/altmetrics.en-GB/#postman-api-documentation","title":"Postman API Documentation","text":"<p>For those who are familiar with Postman, the Altmetrics API has been documented using Postman, and a JSON copy of this documentation can be found at https://github.com/hirmeos/altmetrics/tree/master/docs/postman.</p>"},{"location":"metrics-docs/altmetrics.en-GB/#getting-a-token","title":"Getting a token","text":"<p>Most requests to the Altmetrics API will need to validated with a JSON Web Token (JWT). The process of acquiring and using a JWT will be explained below. Please note: Your account will need to be approved before you can be issued a JWT.</p> <p>API endpoint: https://altmetrics.operas-eu.org/api/get_token</p> <p>Method: GET</p> <p>Your request will need to be authenticated using basic authentication. This will use your login details as  username:password, where username is the email you registered with and password is your password.</p> <p>Example: Assuming a user registers with the following credentials - email: test.user@gmail.com - password: test-password-123</p> <p>With curl, this can be done as either</p> <pre><code>curl -u test.user@gmail.com:test-password-123 https://altmetrics.operas-eu.org/api/get_token\n</code></pre> <p>or using the base64 encoding of username:password</p> <pre><code>curl --header \"Authorization: Basic dGVzdC51c2VyQGdtYWlsLmNvbTp0ZXN0LXBhc3N3b3JkLTEyMw==\" https://altmetrics.operas-eu.org/api/get_token\n</code></pre>"},{"location":"metrics-docs/altmetrics.en-GB/#token-bearer-schema","title":"Token Bearer schema","text":"<p>Once you have a token, all requests to the Altmetrics API will require you to use this token to authenticate yourself. To do this, simply add the token to your request header, as follows.</p> <pre><code>Authorization: Bearer [token]\n</code></pre> <p>Where [token] represents your JWT.</p>"},{"location":"metrics-docs/altmetrics.en-GB/#registering-dois","title":"Registering DOIs","text":"<p>You can post the DOIs of works to the Altmetrics API.</p> <p>API endpoint: https://altmetrics.operas-eu.org/api/uriset</p> <p>Method: POST</p> <p>JSON format: The Altmetrics API expects to receive JSON, containing a list of DOIs in the format shown below. Each  DOI can be registered with zero or more URLs.</p> <pre><code>[\n    {\n        \"doi\": DOI\n        \"url\": [\n            URL1,\n            URL2,\n            URL3,\n        ]\n    }\n]\n</code></pre> <p>Refer to postman JSON for an example call to this API endpoint.</p>"},{"location":"metrics-docs/altmetrics.en-GB/#querying-dois","title":"Querying DOIs","text":"<p>Check all DOIs associated with your user account. Remember to authenticate yourself with your JWT.</p> <p>API endpoint: https://altmetrics.operas-eu.org/api/uriset</p> <p>Method: GET</p> <p>Refer to postman JSON for an example call to this API endpoint.</p>"},{"location":"metrics-docs/annotation.en-GB/","title":"Annotation","text":"<p>The aim of this section is to guide the partner through the integration of their publishing platform with Hypothes.is and the CrossRef Event Data API, which is the first step in order to get their data (and annotation) ingested into the HIRMEOS Metrics service(s).</p>"},{"location":"metrics-docs/annotation.en-GB/#the-hypothesis-integration","title":"The Hypothes.is integration","text":"<p>A couple of quick remarks from the backend perspective:</p> <ul> <li>annotations are saved and stored in the Hypothes.is services</li> <li>annotations are associated with the URL of the page</li> </ul>"},{"location":"metrics-docs/annotation.en-GB/#cdn","title":"CDN","text":"<p>Ubiquity Press has set up a CDN serving all the required libraries, except the Hypothes.is library. A quick overview of the reasons to have libraries served by a CDN:</p> <ul> <li>all the required libraries are available from the same resource</li> <li>all the required libraries are tied to a specific version of the bundle (see more below) and can be upgraded  altogether, changing the version in the URL</li> <li>the CDN manager (Ubiquity Press) will take care of creating new bundles when the libraries are upgraded, and this  will happen consistently with the developments in the libraries and the related platforms (Hypothes.is)</li> </ul> <p>The CDN folders are structure as follows:</p> <pre><code>https://storage.googleapis.com/operas/&lt;version&gt;/&lt;name&gt;\n</code></pre> <p>Where:</p> <p><code>version</code>: version of the JS bundle, (e.g. <code>v1</code>, <code>v2</code>)</p> <p><code>name</code>: name of the library</p> <p>The following table contains a list of the available libraries:</p> library public link epub.js https://storage.googleapis.com/operas/v1/epub.js epub.min.js https://storage.googleapis.com/operas/v1/epub.min.js pdf.js https://storage.googleapis.com/operas/v1/pdf.js pdf.worker.js https://storage.googleapis.com/operas/v1/pdf.worker.js"},{"location":"metrics-docs/annotation.en-GB/#html","title":"HTML","text":"<p>The best and up to date resource to learn how to set up Hypothes.is annotations on an HTML page is the Hypothes.is  Quickstart guide.</p>"},{"location":"metrics-docs/annotation.en-GB/#epub","title":"EPUB","text":"<p>At the most basic level, the only resources required to enable annotations on an EPUB are the Hypothes.is CDN, <code>jszip  3.1.5</code> and <code>epub.js 0.3.66</code>:</p> <pre><code>&lt;script src=\"https://cdn.hypothes.is/hypothesis\"&gt;&lt;/script&gt;\n&lt;script src=\"https://storage.googleapis.com/operas/v1/jszip.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://storage.googleapis.com/operas/v1/epub.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>This link hosted by Hypothes.is contains a working implementation. In the example, a function in <code>reader.js</code> is called  when loading the page. This function initialises an epub.js reader and enables Hypothes.is annotation throughout the   page, including within the EPUB content. The code for this working implementation can be found in   this git repository.</p>"},{"location":"metrics-docs/annotation.en-GB/#pdf","title":"PDF","text":"<p>TBC</p>"},{"location":"metrics-docs/annotation.en-GB/#embed-dublin-core","title":"Embed Dublin Core","text":"<p>It is clear that in order to make easier to calculate metrics around published content, we need to associate the annotations with a unique identifier for the published content, most often the DOI.</p> <p>The CrossRef Event Data service scans known websites in order to retrieve URLs for the content and associate them with DOIs. To make this happen, the content page should contain Dublin Core Meta tags.</p> <p>Something similar to the following code snippet should be used in order to allow the CrossRef Event Data service to associate a published content page with a DOI:</p> <pre><code>&lt;head&gt;\n    &lt;meta name=\"dc.identifier\" content=\"10.1371/journal.pone.0160617\"/&gt;\n&lt;/head&gt;\n</code></pre> <p>The Event Data documentation has a dedicated section on the best practices for publishers.</p>"},{"location":"metrics-docs/annotation.en-GB/#check-the-hirmeos-metrics-api","title":"Check the HIRMEOS Metrics API","text":"<p>What happens next: - CrossRef Event Data will crawl the pages for annotations - the HIRMEOS Metrics service will gather information on the Event Data API</p> <p>The results are available on the HIRMEOS metrics, by source:</p> <pre><code>https://metrics-api.operas-eu.org/events?filter=work_uri:info:doi:10.5334/bbc,measure_uri:https://metrics.operas-eu.org/hypothesis/annotations/v1\n</code></pre>"},{"location":"metrics-docs/countries-api.en-GB/","title":"Countries API","text":"<p>REST API to a database containing tuples of standarised country codes and names, e.g. ('urn:iso:std:3166:-2:ES', 'Spain'). When the database is populated correctly (i.e. with all possible country names), the API is able to return standarised codes for unofficial country names.</p> <ul> <li>API Source: https://github.com/hirmeos/countries_api</li> <li>API Image: https://hub.docker.com/r/openbookpublishers/countries_api</li> <li>Database Source: https://github.com/hirmeos/countries_db</li> <li>Database Image: https://hub.docker.com/r/openbookpublishers/countries_db</li> </ul>"},{"location":"metrics-docs/countries-api.en-GB/#setup","title":"Setup","text":""},{"location":"metrics-docs/countries-api.en-GB/#environment-variables","title":"Environment variables","text":"<p>The following environment variables may be set. If you're running the service using docker-compose, you may use different files to separate API-specific variables from database's. All variables must be set.</p> Variable Description <code>API_DEBUG</code> Boolean flag to output debugging lines to the console. <code>SECRET_KEY</code> An up to 255 bytes random key, shared with services requiring authentication <code>TOKEN_LIFETIME</code> Number of seconds before a token expires. <code>PBKDF2_ITERATIONS</code> Number of PBKDF2 iterations - the more the merrier. <code>DB_HOST</code> The address of the host where the tokens      database runs. <code>DB_DB</code> The name of the tokens database. <code>DB_USER</code> The user name of the tokens database. <code>DB_PASS</code> The password of the tokens database. <code>ALLOW_ORIGIN</code> String with a domain name to be included in CORS headers."},{"location":"metrics-docs/countries-api.en-GB/#running-with-docker-compose","title":"Running with docker-compose","text":"<p>The easiest way to get a fully featured and functional setup is using a docker-compose file, since the API depends on the [hirmeos/countries_db][1] database.</p> <pre><code>version: \"3.5\"\n\nservices:\n  countries_db:\n    image: openbookpublishers/countries_db:1\n    container_name: \"countries_db\"\n    restart: unless-stopped\n    env_file:\n      - ./config/db.env\n\n  countries_api:\n    image: openbookpublishers/countries_api:1\n    container_name: \"countries_api\"\n    restart: unless-stopped\n    ports:\n      - 8080:8080\n    environment:\n      - DB_HOST=countries_db\n    env_file:\n      - ./config/api.env\n      - ./config/db.env\n    depends_on:\n      - countries_db\n</code></pre> <p>Notes: - The example uses the docker images already built and used by Open Book Publishers. You may use the provded docker files to build your own, instead. - You may of course use whatever port you like, and/or use a proxy server (e.g. nginx) to handle the API endpoint. - In this example we use two sets of configuration files, one with database credentials shared with both containers, the other one with API configuration only available to the API container. You may use a single file with all environment variables.</p>"},{"location":"metrics-docs/countries-api.en-GB/#api-routes","title":"API routes","text":"<p>The following methods are allowed:</p> Method Route Description <code>GET</code> <code>/countries</code> List a country if <code>country_id</code> is provided, attempt to resolve a country if <code>country_name</code> is provide, otherwise list them all. <code>POST</code> <code>/countries</code> Create a new country record providing <code>country_id</code>, <code>country_code</code>, <code>country_name</code> and <code>continent_code</code> in a json object. <code>POST</code> <code>/names</code> Add a country name to an existing country."},{"location":"metrics-docs/crossref-citedby.en-GB/","title":"Crossref Citedby Driver","text":"<p>Install the driver as a package from PyPI by visiting the following link on pypi.</p> <p>This library encompasses the logic for the OPERAS Crossref Cited-by Driver. Its primary functionality enables users to retrieve citations from the Crossref Cited-by API. For detailed information about the API, please refer to the official documentation at the crossref.org link.</p> <p>Crossref Cited-by API Documentation To utilize this library, users are required to provide a Crossref API username and password. Additionally, a start_date parameter is necessary to specify the month for retrieving relevant metrics.</p> <p>The driver is designed to extract pertinent data from the XML response, including the determination of the correct DOI if it is aliased. Subsequently, the plugin saves the filtered data from the response into the Event table within our database.</p>"},{"location":"metrics-docs/crossref-citedby.en-GB/#plugin-variables-description","title":"Plugin Variables Description","text":"Variable Description <code>active</code> The plugin will not run if this is set to false, boolean. <code>start_date</code> the date that you want to first pull results the first time the plugin runs, a string. <code>uri_scheme</code> Uri scheme to save results against, string. <code>doi_prefix</code> can be a full DOI or a prefix. , integer. <code>username</code> username for the google books account, string. <code>password</code> password for the google books account, string."},{"location":"metrics-docs/crossref-citedby.en-GB/#example-of-plugin-configuration-file","title":"Example of plugin configuration file:","text":"<pre><code>doi_prefix: 10.2345\nusername: crossref-username\npassword: crossref-password\nstart_date: '2024-01-01'\nuri_scheme: \"info:doi\"\nactive: false\n</code></pre>"},{"location":"metrics-docs/drivers.en-GB/","title":"Drivers","text":"<p>Drivers are a small Python package used by the metrics-driver-wrapper app and each of them has a different purpose  to help us manage the external API calls and manage the 'raw' data fetched by them for each plugin. They can be found on PyPI, and each of them has been fully tested separately.</p>"},{"location":"metrics-docs/drivers.en-GB/#find-bellow-the-list-of-drivers-used-by-the-metrics-drivers-wrapper","title":"Find bellow the list of drivers used by the Metrics-Drivers-Wrapper","text":"<ul> <li>Access Logs Local</li> <li>Crossref Cited-by</li> <li>Google Books</li> <li>IRUS-UK</li> <li>Matomo</li> <li>Unglue.it</li> <li>Google Analytics 3 (being deprecated)</li> </ul>"},{"location":"metrics-docs/getting-started.en-GB/","title":"Getting Started","text":""},{"location":"metrics-docs/getting-started.en-GB/#foreword","title":"Foreword","text":"<p>Usage metrics have been widely adopted in Open Access works as an indication of the popularity or acceptance of a particular publication. Inevitably, performance assessment and funding allocation is being based on these statistics. However, while we do not agree with these practices, we acknowledge that metrics collection and reporting is nowadays a fundamental need for any organisations producing and/or hosting digital monographs.</p> <p>Thanks to their licenses, Open Access publications are disseminated across multiple platforms and repositories. However, publishers and distributing platforms simply collect usage data from their own system, due to the lack of public APIs that could allow programmatic collection of data from all the various websites hosting a publication. Most usage metrics available within distributing platforms display data for that particular website, not for the publication.</p> <p>The software is designed to collect metrics from various sources and is divided into different sections, with the most prominent being the Metrics-drivers-wrapper which contains the packages called \u2018drivers\u2019. These drivers serve as entry point components, responsible for gathering data into the system. Following this, we have the \u2018plugins\u2019, which are used to normalise the collected data. Finally, the metrics are combined with the altmetrics and sent to the user interface, where they are displayed in a user-friendly Javascript widget.</p> <p>As part of Work Package 6 of the HIRMEOS project Ubiquity Press and Open Book Publishers has developed open source software to allow collection and normalisation of third-party usage metrics, used to populate a database of title-specific data that allows its analysis and visualisation.</p>"},{"location":"metrics-docs/getting-started.en-GB/#simplified-diagram","title":"Simplified diagram","text":""},{"location":"metrics-docs/getting-started.en-GB/#components","title":"Components","text":"<p>The HIRMEOS metrics suite is made of:</p> <ul> <li>Metrics-drivers-wrapper. Repository where all drivers, plugins and config are found.</li> <li>Identifier Translation Service. Used to normalize identifiers. The Identifier Translation Service is a JSON REST API to a database of publication URIs; it maps works (publications) to URIs (e.g. <code>info:doi:10.11647/obp.0001</code>, <code>urn:isbn:9781906924010</code>, https://www.openbookpublishers.com/product/3) to allow converting from one identifier to another.</li> <li>Drivers. Used to collect and normalize data from reporting platforms.</li> <li>Tokens API. Used to generate JSON Web Tokens to authenticate all the various services.</li> <li>Countries API. Used by some drivers to normalize geographical data.</li> </ul>"},{"location":"metrics-docs/getting-started.en-GB/#system-requirements","title":"System requirements","text":"<p>Although every component involves has specific requirements, most of them will revolve around the following components: * ensure that you are running a compatible version of Python, specifically Python &gt;= 3.10; this version is required to ensure proper compatibility and functionality * install the project requirements using the <code>requirements.txt</code> file; this will not only install the necessary Python packages from PyPI (including the drivers), but also meet the project's other dependencies * finally, you need PostgreSQL database running on your system</p>"},{"location":"metrics-docs/getting-started.en-GB/#how-it-works","title":"How it works","text":"<p>This system is divided into different sections. Firstly, there are the drivers, which serve as the components responsible for gathering data into the system as entry points (refer to the point above to view the architecture diagram). In most cases, we connect to the source API to obtain the metrics, which is the preferred method. However, in two cases, we process a CSV file with metrics: 'Access Logs Local' and 'Google Books' (the latter is optional, as it can involve either web scraping Google Books or processing a CSV file uploaded by the user).</p> <p>Next, we have the plugins, which are responsible for processing this data. Normally, each plugin corresponds to a driver, with the exception of 'JSTOR' and 'Access Logs,' which fetch the data individually. 'JSTOR' processes a user's CSV file, and 'Access Logs' performs a call to Google Cloud without any driver intervention. Subsequently, the metrics are saved to the database.</p> <p>Last but not least, we have a second database that combines the metrics fetched by the drivers and plugins mentioned above, along with the altmetrics obtained from sites such as 'hypothes.is' and 'Wikipedia\u2019, among others. Finally, these combined metrics are sent to the frontend for display in a widget..</p>"},{"location":"metrics-docs/getting-started.en-GB/#system-architecture-and-diagram","title":"System architecture and diagram","text":"<p>See the diagram bellow for an overview of the different components and their interactions (click to zoom in):</p> <p> </p>"},{"location":"metrics-docs/getting-started.en-GB/#more","title":"More","text":"<p>You may find more information, including slides, here.</p> <p>You may also get in touch with our technical team: - Usage metrics: Javier Arias (Open Book Publishers) - Altmetrics: Rowan Hatherley (Ubiquity Press) - Metrics Drivers: Cristian Garcia (Ubiquity Press)</p>"},{"location":"metrics-docs/google-analytics.en-GB/","title":"Google Analytics Driver (Legacy)","text":"<p>Note from Google: Starting on July 1, 2023, standard Universal Analytics properties stopped processing new data, and all customers will lose access to the Universal Analytics interface and API starting on July 1, 2024.</p> <p>Therefore, this driver can only be used to collect data for metrics that occurred up until 01 July 2023 and the driver will stop working entirely after 01 July 2024.</p> <p>This driver allows programmatic retrieval of stats reports from Google\u2019s standard Universal Analytics API in order to generate normalised publication-level usage reports.</p>"},{"location":"metrics-docs/google-analytics.en-GB/#plugin-variables-description","title":"Plugin Variables Description","text":"Variable Description <code>active</code> The plugin will not run if this is set to false, boolean. <code>start_date</code> the date that you want to first pull results the first time the plugin runs, a string. <code>uri_scheme</code> Uri scheme to save results against, string. <code>events</code> Configuration for \u201cevent\u201d metrics. <code>filters</code> RL paths to search, list. <code>json_key</code> Contents of JSON key file from Google for authentication. <code>prefix</code> Url prefix, string. <code>regex</code> regexes to search by, list. <code>view_id</code> View ID, string. <code>views</code> Configuration for \u201cview\u201d metrics. <p>Example configuration file:</p> <p>Please refer to the metrics drivers wrapper for an example configuration file.</p>"},{"location":"metrics-docs/google-books.en-GB/","title":"Google Books Driver","text":"<p>Install the driver as a package from PyPI by visiting the following link on pypi. </p> <p>This driver loads csv reports from google books. It can either download a CSV report from google books and return a string of its content.</p> <p>The first option is web scraping using Selenium. You need a google account which has to be a dedicated account that only has access to google play books, and a second google account as recovery is needed. And 2FA also needs to be disabled to make sure the web scraping is successful. We recommended you double check the output, since there have been issues with the google API, when running the driver.</p>"},{"location":"metrics-docs/google-books.en-GB/#plugin-variables-description","title":"Plugin Variables Description","text":"Variable Description <code>active</code> The plugin will not run if this is set to false, boolean. <code>start_date</code> the date that you want to first pull results the first time the plugin runs, a string. <code>uri_scheme</code> Uri scheme to save results against, string. <code>gb_account</code> Google books account id. Numeric representation of the account, used to download the google books files, string. <code>user_agent</code> Used by selenium to initialise the configuration, string. <code>username</code> username for the google books account, string. <code>password</code> password for the google books account, string."},{"location":"metrics-docs/google-books.en-GB/#example-of-plugin-configuration-file","title":"Example of plugin configuration file:","text":"<pre><code>Gb_account - \"123456789\"\nUser_agent - \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2 Firefox/25.0\"\nusername: \"\"\npassword: \"\"\nuri_scheme: \"info:doi\"\nstart_date: \"2023-01-01\"\nactive: false\n</code></pre>"},{"location":"metrics-docs/identifier-translation-service.en-GB/","title":"Identifier Translation Service","text":"<p>The Identifier Translation Service is a JSON REST API to a database of publication URIs. The translation service maps works (publications) to URIs (e.g. info:doi:10.11647/obp.0001, urn:isbn:9781906924010, https://www.openbookpublishers.com/product/3) to allow converting from one identifier to another.</p>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#setup","title":"Setup","text":""},{"location":"metrics-docs/identifier-translation-service.en-GB/#authentication","title":"Authentication","text":"<p>If you are planning to expose the API to the internet you may protect it using JWT. You must set up a tokens API such as hirmeos/tokens_api and share the secret key with this service via the <code>SECRET_KEY</code> env variable, the translation service will then expect a token in the <code>Authorization</code> header of each request it receives and will check whether it was generated with the secret key.</p>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#environment-variables","title":"Environment variables","text":"<p>The following environment variables may be set. If you're running the service using docker-compose, you may use different files to separate API-specific variables from database's. All variables must be set.</p> Variable Description <code>API_DEBUG</code> Boolean flag to output debugging lines to the console. <code>JWT_DISABLED</code> Boolean flag to toggle using JWT authentication. Should only be set to <code>False</code> in a local network or developing environment. <code>SECRET_KEY</code> An up to 255 bytes random key, shared with a JWT API. <code>IDENTIFIERSDB_HOST</code> The address of the host where the identifiers database runs. <code>IDENTIFIERSDB_DB</code> The name of the identifiers database. <code>IDENTIFIERSDB_USER</code> The user name of the identifiers database. <code>IDENTIFIERSDB_PASS</code> The password of the identifiers database. <code>ALLOW_ORIGIN</code> String with a domain name to be included in CORS headers."},{"location":"metrics-docs/identifier-translation-service.en-GB/#running-with-docker-compose","title":"Running with docker-compose","text":"<p>The easiest way to get a fully featured and functional setup is using a docker-compose file, since the API depends on the hirmeos/identifiers_db database.</p> <pre><code>version: \"3.5\"\n\nservices:\n  identifiertranslatorservice_db:\n    image: openbookpublishers/identifiers_db:1\n    container_name: \"identifiertranslatorservice_db\"\n    restart: unless-stopped\n    volumes:\n      - db:/var/lib/postgresql/data\n    env_file:\n      - ./config/db.env\n\n  identifiertranslatorservice_api:\n    image: openbookpublishers/identifier_translation_service:1\n    container_name: \"identifiertranslatorservice_api\"\n    restart: unless-stopped\n    ports:\n      - 8080:8080\n    environment:\n      - IDENTIFIERSDB_HOST=identifiertranslatorservice_db\n    env_file:\n      - ./config/api.env\n      - ./config/db.env\n    depends_on:\n      - identifiertranslatorservice_db\n\nvolumes:\n  db:\n</code></pre> <p>Notes: - The example uses the docker images already built and used by Open Book Publishers. You may use the provided docker files to build your own, instead. - You may of course use whatever port you like, and/or use a proxy server (e.g. nginx) to handle the API endpoint. - The <code>db</code> volume ensure the contents of the database persist when restarting/deleting the container. - In this example we use two sets of configuration files, one with database credentials shared with both containers, the other one with API configuration only available to the API container. You may use a single file with all environment variables. - For development purposes you can disable the JWT check applying this line under the environment section: <code>- JWT_DISABLED=true</code>.</p>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#api-structure","title":"API Structure","text":""},{"location":"metrics-docs/identifier-translation-service.en-GB/#publication-identifiers-as-uris","title":"Publication identifiers as URIs","text":"<p>The translation service stores all work (publication) identifiers as URIs, therefore when querying/populating the database you must use the relevant URI scheme.</p> Identifier URI Scheme Example ISBN urn:isbn urn:isbn:9781906924003 DOI info:doi info:doi:10.11647/obp.0001 ISSN urn:issn urn:issn:20542445 UUID urn:uuid urn:uuid:463b4279-4e8d-47f8-a133-ad8ce7c4f86c Handle info:hdl info:hdl:10670/1.di2dtn URL http http://www.openbookpublishers.com/product/3 URL https https://www.openbookpublishers.com/product/3"},{"location":"metrics-docs/identifier-translation-service.en-GB/#the-canonical-flag","title":"The canonical flag","text":"<p>When multiple identifiers of the same scheme are associated with the same work, you may set one and only one canonical URI per URI scheme and work, which will be the returned value when the <code>strict</code> flag is used.</p> <p>The <code>/translate</code> path attempts to retrieve a unique identifier of the chosen URI scheme (e.g. translating from a urn:isbn to a info:doi), if more than one identifier of the same URI scheme is found the API will complain that it is not able to translate properly. The canonical flag makes sure that in such a case the API is able to translate to the desired canonical URI of that particular scheme.</p> <p>A work can have at most one canonical URI of each URI scheme (e.g. one canonical URL, one canonical ISBN, one canonical DOI, etc.).</p>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#api-routes","title":"API routes","text":"<p>The following methods are allowed:</p> Method Route Description <code>GET</code> <code>/translate</code> Takes a <code>uri</code> as parameter and returns all identifiers associated with it. <code>GET</code> <code>/works</code> Return information about stored publications. <code>POST</code> <code>/works</code> Store a publication and associated URIs in the database. <code>DELETE</code> <code>/works</code> Delete a publication from the database. <code>POST</code> <code>/titles</code> Add a new title to an existing publication. <code>DELETE</code> <code>/titles</code> Remove a title from its publication. <code>POST</code> <code>/uris</code> Add a new URI to an existing publication. <code>DELETE</code> <code>/uris</code> Remove a URI from its publication. <code>GET</code> <code>/work_types</code> Retrieve the full list of publication types. <code>POST</code> <code>/work_relations</code> Store a relationship between two publications (e.g. book -&gt; chapter)"},{"location":"metrics-docs/identifier-translation-service.en-GB/#translate-queries","title":"<code>/translate</code> Queries","text":"<p>This is the most important method in the API since it serves the purpose of translating a given identifier to the desired match (e.g. translate an ISBN or a URL to a DOI).</p>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#translation-by-uri","title":"Translation by URI","text":"<p>Translation by URI (identifier) will query the database searching for other URIs associated with the input. To translate from one uri_scheme to another (e.g. input ISBN to retrieve a DOI) you will need to set a filter of type <code>uri_scheme</code> (see below).</p>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#translation-by-title","title":"Translation by title","text":"<p>Translation by title uses the Levenshtein distance between the input and the stored titles in the database, and outputs a list of candidates matching the given title along with a score (where 0 is a perfect match). When the <code>strict</code> flag is set, the API will attempt to return only the fittest candidate for the query.</p>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#translation-parameters","title":"Translation parameters","text":"<p>You may use this method to either translate a <code>uri</code> or a <code>title</code>, hence one and only one of either parameters is compulsory.</p> Parameter Description uri The URI you want to translate title A URL-encoded title to search for. filter A concatenation of filters of type <code>work_type</code>, <code>uri_scheme</code>, <code>canonical</code> allows refining the query. strict Defaults to <code>false</code>. When set to <code>true</code> it enforces the return of a single identifier."},{"location":"metrics-docs/identifier-translation-service.en-GB/#translation-example","title":"Translation example","text":"<p><code>/translate?uri=urn:isbn:9781906924652&amp;strict=true&amp;filter=work_type:monograph,work_type:book,uri_scheme:info:doi</code> will retrieve a unique book DOI for the given ISBN; if the <code>work_type</code> wasn't specified, the query would fail to retrieve a single DOI, since it would also include chapter DOIs which are associated with that same ISBN.</p> <pre><code>{\n  \"code\": 200,\n  \"status\": \"ok\",\n  \"data\": [\n    {\n      \"URI\": \"info:doi:10.11647/obp.0001\",\n      \"URI_parts\": {\n        \"scheme\": \"info:doi\",\n        \"value\": \"10.11647/obp.0001\"\n      },\n      \"canonical\": true,\n      \"score\": 0,\n      \"work\": {\n        \"type\": \"monograph\",\n        \"URI\": [],\n        \"UUID\": \"463b4279-4e8d-47f8-a133-ad8ce7c4f86c\",\n        \"title\": [\n          \"That Greece Might Still Be Free: The Philhellenes in the War of Independence\"\n        ]\n      }\n    }\n  ],\n  \"count\": 1\n}\n</code></pre>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#works-queries","title":"<code>/works</code> Queries","text":"<p>This route is used to either retrieve full work records, or to populate the database with new works.</p>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#get-works-parameters","title":"<code>GET /works</code> parameters","text":"<p>You may use this method to either translate a <code>uri</code> or a <code>title</code>, hence one and only one of either parameters is compulsory.</p> Parameter Description uuid The <code>work_id</code> UUID of a particular work. If provided it will retrieve a single publication, if not set it will retrieve all publications. filter A concatenation of filters of type <code>work_type</code>, <code>uri_scheme</code>, <code>canonical</code> allows refining the query."},{"location":"metrics-docs/identifier-translation-service.en-GB/#get-works-example","title":"<code>GET /works</code> example","text":"<p><code>/works?filter=work_type:monograph,work_type:book,uri_scheme:info:doi,canonical:true</code> will retrieve the canonical DOI of all books and monographs.</p> <pre><code>{\n  \"code\": 200,\n  \"status\": \"ok\",\n  \"count\": 145,\n  \"data\": [\n    {\n      \"type\": \"monograph\",\n      \"URI\": [\n        {\n          \"URI\": \"info:doi:10.11647/obp.0033\",\n          \"URI_parts\": {\n            \"scheme\": \"info:doi\",\n            \"value\": \"10.11647/obp.0033\"\n          },\n          \"canonical\": true,\n          \"score\": 0\n        }\n      ],\n      \"UUID\": \"0034efd8-be0b-4527-b0e0-bad1faff3c2f\",\n      \"title\": [\n        \"Storytelling in Northern Zambia: Theory, Method, Practice and Other Necessary Fictions\",\n        \"Storytelling in Northern Zambia. Theory, Method, Practice and Other Necessary Fictions\"\n      ]\n    },\n    ...\n  ]\n}\n</code></pre>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#post-works-data","title":"<code>POST /works</code> data","text":"Attribute Type Description title string or array of strings One or more titles that represent the publication. type string The publication type of the work (e.g. 'book', 'book-chapter'). uri object or array of objects Each URI object must have a <code>uri</code> (string) and a <code>canonical</code> (boolean) attributes. parent string or array of strings Optional. You may provide the UUID of an existing work that is a parent of this one. child string or array of strings Optional. You may provide the UUID of an existing work that is a child of this one."},{"location":"metrics-docs/identifier-translation-service.en-GB/#post-works-example","title":"<code>POST /works</code> example","text":"<p>In this example we use a fictional parent UUID, which could be one of a book series for example - and two child UUIDs, which could represent two chapters in the book.</p> <pre><code>{\n  \"type\": \"monograph\",\n  \"title\": [\n    \"That Greece Might Still Be Free: The Philhellenes in the War of Independence\",\n    \"That Greece Might Still Be Free\"\n  ],\n  \"uri\": [\n    {\n      \"uri\": \"info:doi:10.11647/obp.0001\",\n      \"canonical\": true\n    }, {\n      \"uri\": \"urn:isbn:9781906924003\",\n      \"canonical\": true\n    }, {\n      \"uri\": \"urn:isbn:9781906924027\",\n      \"canonical\": false\n    }, {\n      \"uri\": \"https://www.openbookpublishers.com/product/3\",\n      \"canonical\": false\n    }\n  }],\n  \"parent\": \"0a0f1877-d3da-4a84-bce6-e388b5e722d5\",\n  \"child\": [\n    \"b23bfb0f-dc1b-45bd-9f31-2955dcae9b0d\",\n    \"a5175483-8d03-4d82-9522-a039fb8873aa\"\n  ]\n}\n</code></pre>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#delete-works-data","title":"<code>DELETE /works</code> data","text":"Attribute Type Description UUID string The work_id of the work to delete."},{"location":"metrics-docs/identifier-translation-service.en-GB/#more","title":"More","text":"<p>Check some more example queries.</p>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#crosref-extension","title":"Crosref extension","text":"<p>The main purpose of this service is to store as many URIs per publication as possible, and it's unlikely that the user of this software will be aware of all of them. For this reason you may set up hirmeos/crossref_uri_import to periodically query Crossref's API with your DOIs and populate the translation service with potential new data (e.g. multiple DOIs assigned to the same publication, multiple resolution URLs).</p>"},{"location":"metrics-docs/identifier-translation-service.en-GB/#populating-the-database","title":"Populating the database","text":"<p>You may write your own version of OpenBookPublishers/obp_product_import to populate the translation service with your existing data. Or you can use this script to add individual URIs to an existing publication: OpenBookPublishers/obp_uri_import</p>"},{"location":"metrics-docs/irus-uk.en-GB/","title":"IRUS-UK Driver","text":"<p>Install the driver as a package from PyPI by visiting the following link on pypi.</p> <p>This driver collects report metrics from IRUS-UK, and normalises them.</p> <p>Refer to https://irus.jisc.ac.uk/r5/oapen/embed/api/#irus_ir for the official documentation about the API request parameters</p> <p>You may have to contact OAPEN to obtain credentials. Two kinds of credentials are needed, one for requestor_id and one for the api_key environment variables. This only applies if you want to specifically fetch the OAPEN metrics.</p>"},{"location":"metrics-docs/irus-uk.en-GB/#plugin-variables-description","title":"Plugin Variables Description","text":"Variable Description <code>active</code> The plugin will not run if this is set to false, boolean. <code>start_date</code> the date that you want to first pull results the first time the plugin runs, a string. <code>uri_scheme</code> Uri scheme to save results against, string. <code>base_url</code> Url for the api, string. <code>report_path</code> Url endpoint for the reports, string. <code>platform</code> IRUS identifier of the repository (Platform) for which the data is being requested,integer. <code>requestor_id</code> Id showing who is making the request, required for login, string. <code>api_key</code> Api key, string. <code>measure_uri</code> measure uri to be saved, string. <code>attributes_to_show</code> Country is shown by default, string. <code>measure_uri</code> Type of metrics to be shown, string."},{"location":"metrics-docs/irus-uk.en-GB/#example-of-plugin-configuration-file","title":"Example of plugin configuration file:","text":"<pre><code>base_url: \"https://irus.jisc.ac.uk/api/v3/oapen\"\nreport_path: \"/reports/oapen_ir\"\nplatform: 111\nrequestor_id: \"1234567890\"\nmeasure_uri: \"https://metrics.operas-eu.org/irus-uk/downloads/v1\"\napi_key: \"\"\nattributes_to_show: \"Country\"\nmetrics_type: \"Unique_Item_Requests\"\nactive: true\nstart_date: \"2023-08-01\"\nuri_scheme: \"info:doi\"\n</code></pre>"},{"location":"metrics-docs/jstor.en-GB/","title":"JSTOR","text":"<p>This is a plugin not a driver which means no installation from pypi is needed.</p> <p>In a nutshell takes an excel spreadsheet file located in the directory pointed to by the \u2018logdir\u2019 variable, and processes the data contained.</p> <p>The user will need to provide the file, which can be generated from the jstor website, using their own csv generation tools.</p> <p>It\u2019s worth making sure there is a column called \u2018Country_Name\u2019. The driver will need that column in order to generate ISO country codes.</p>"},{"location":"metrics-docs/jstor.en-GB/#plugin-variables-description","title":"Plugin Variables Description","text":"Variable Description <code>active</code> The plugin will not run if this is set to false, boolean. <code>start_date</code> The date that you want to first pull results the first time the plugin runs, a string. <code>uri_scheme</code> Uri scheme to save results against, string. <code>logdir</code> string, location of csv file. <code>sheet_name</code> string, name of the sheet where the jstor information is contained."},{"location":"metrics-docs/jstor.en-GB/#example-of-plugin-configuration-file","title":"Example of plugin configuration file:","text":"<pre><code>logdir: \"plugins/jstor/logs\"\nsheet_name: \"Sheet0\"\nuri_scheme: \"info:doi\"\nactive: false\nstart_date: \"2023-01-01\"\n</code></pre>"},{"location":"metrics-docs/matomo.en-GB/","title":"Matomo Driver","text":"<p>Install the driver as a package from PyPI by visiting the following link on pypi.</p> <p>This driver allows programmatic retrieval of Matomo website metrics.</p> <p>The driver accesses the matomo api to gather your website metrics. Metrics are gathered for a particular day and different API actions can be used. Matomo metrics track page views and events on the page as well. Matomo maintains detailed documentation on API usage on their website.</p> <p>Credentials</p> <p>You will need a matomo account and matomo account credentials in order to use the driver.</p>"},{"location":"metrics-docs/matomo.en-GB/#plugin-variables-description","title":"Plugin Variables Description","text":"Variable Description <code>active</code> The plugin will not run if this is set to false, boolean. <code>start_date</code> the date that you want to first pull results the first time the plugin runs, a string. <code>uri_scheme</code> Uri scheme to save results against, string. <code>site_id</code> The id for your site, provided by Matomo, an integer, an integer. <code>site_auth</code> The authentication token for the matomo api, a string. <code>depth</code> Depth of urls to search, an integer. <code>views</code> Configuration for \u201cviews\u201d metrics, in the form. <code>downloads</code> Configuration for \u201cdownloads\u201d metrics, in the form. <code>events</code> Configuration for \u201cevents\u201d metrics, if these are configured in your matomo instance, in the form"},{"location":"metrics-docs/matomo.en-GB/#example-of-a-yaml-file","title":"Example of a yaml file:","text":"<pre><code>base_url: 'https://demo.press.matomo.cloud'\nsite_auth: ''\nsite_id: '1'\ndepth: 5\nstart_date: '2023-01-01'\nviews: {\n  \"&lt;measure_uri_1&gt;\": {  # e.g. For abstract views\n    \"segment\": &lt;matomo segment&gt; # Optional,\n    \"regex\": {\n      \"include\": [\"&lt;URL pattern of results to keep&gt;\"], # optional\n      \"exclude\": [\"&lt;URL pattern of results to ignore&gt;\"], # optional\n    }\n  \"&lt;measure_uri_2&gt;\": { &lt;etc&gt; }  For ebook reads\n}\ndownloads: {\n  \"&lt;measure_uri_1&gt;\": {\n    \"regex\": {\n      \"include\": [\n        '&lt;REGEX&gt;',\n      ],\n    }\n  },\n}\nevents: {\n  \"&lt;measure_uri_1&gt;\": [  # Event categories to save against this measure\n    \"&lt;category_1&gt;\",\n    \"&lt;category_2&gt;\",\n  ],\n  \"&lt;measure_uri_2&gt;\": [ &lt;etc&gt; ],\n}\n</code></pre>"},{"location":"metrics-docs/metrics-api.en-GB/","title":"Metrics API","text":"<p>The Metrics API is both available as read-only via GET requests, and as write-read access </p> <ul> <li>Metrics API Source: https://github.com/hirmeos/metrics-api</li> </ul>"},{"location":"metrics-docs/metrics-api.en-GB/#api-routes","title":"API routes","text":"<p>The following methods are allowed:</p> Method Route Description <code>GET</code> <code>/measures</code> List the descriptions of the measures available in the API <code>GET</code> <code>/events</code> Retrieves the measures from the API with various parameters, see below"},{"location":"metrics-docs/metrics-api.en-GB/#get-events-parameters","title":"<code>GET /events</code> parameters","text":"<p>When retrieving measures, you can (and should) provide some parameters to the request, they can be seen below:</p> Parameter Description aggregation The results can be aggregated on certain values, i.e. aggregation on <code>measure_uri</code>. Aggregation must be one of the following: empty, <code>measure_uri,country_uri</code>, <code>year,measure_uri</code>, <code>measure_uri,month</code>, <code>month,measure_uri</code>, <code>measure_uri,year</code>, <code>country_uri,measure_uri</code>, <code>measure_uri</code>. filter Many different options can be used in the filter, i.e. filtering on <code>measure_uri</code> or on <code>work_uri</code>. Those can be together or even used multiple times by separating them with a comma \"<code>,</code>\" <p>Examples:</p> <ul> <li>Example of simple query on a DOI and results aggregated by the measure_uri: <code>https://metrics-api.operas-eu.org/events?aggregation=measure_uri&amp;filter=work_uri:info:doi:10.11647/obp.0020</code></li> <li>Example of the same query but selecting only a couple of measures: <code>https://metrics-api.operas-eu.org/events?aggregation=measure_uri&amp;filter=work_uri:info:doi:10.11647/obp.0020,measure_uri:https://metrics.operas-eu.org/oapen/downloads/v1,measure_uri:https://metrics.operas-eu.org/obp/downloads/v1</code></li> </ul>"},{"location":"metrics-docs/onboarding-sending-metrics.en-GB/","title":"Onboarding: Sending metrics to the OPERAS Metrics-API","text":"<p>The whole OPERAS infrastructure is open source and can be run by anyone. However, in order to make the usage easier, most organisations are currently using a version of the OPERAS infrastructure hosted and maintained by the Ubiquity Press Tech Team. The term \"sending metrics\" means that you (the organisation) will send your metrics to the Metrics API service. These metrics can later be displayed by installing a JavaScript widget on your web page.</p> <p>The documentation below describes the steps needed to send metrics to the OPERAS Metrics API.</p>"},{"location":"metrics-docs/onboarding-sending-metrics.en-GB/#general-overview","title":"General Overview","text":"<p>In order to send metrics to the Metrics API, you will need to authenticate your requests using a JWT, fetched from the Altmetrics service. The workflow for this is as follows:</p> <ol> <li>Register with the Altmetrics Service (documentation below).</li> <li>Confirm your email address, and wait for your account to be approved.</li> <li>Fetch a JWT from the Altmetrics service.</li> <li>Make sure you have your required measures in the Metrics API (see below).</li> <li>Use the JWT to authenticate requests to the Metrics API.</li> </ol> <p>Note that the JWT will only be valid for 24 hours, after which you will need to fetch a new JWT to authenticate requests. Refer to the Altmetrics docs Service documentation for how to register with the service, and how to fetch a JWT.</p>"},{"location":"metrics-docs/onboarding-sending-metrics.en-GB/#altmetrics-service","title":"Altmetrics Service","text":"<p>The Altmetrics Service serves two purposes in the OPERAS infrastructure. Primarily, automatically collects of publicly-accessible metrics related to DOIs. Also to serves as an authentication gateway using JSON Web Token (JWT), which is required to authenticate interactions with the OPERAS Metrics services. </p>"},{"location":"metrics-docs/onboarding-sending-metrics.en-GB/#setting-up-your-user-account","title":"Setting up your user account","text":"<p>You can register for an account at registering. You will be sent an email asking you to confirm the email address you supplied. Click on the link given in this email. To prevent unwanted traffic on the Metrics API the Ubiquity Press Tech Team will need to approve your account before you can use the service. Once your account has been approved, you will receive an email letting you know that you may use the Altmetrics service.</p>"},{"location":"metrics-docs/onboarding-sending-metrics.en-GB/#using-the-api","title":"Using the API","text":"<ul> <li>Postman API Documentation For those who are familiar with Postman, the Altmetrics API has been documented using Postman, and a Postman collection can be found on GitHub: https://github.com/hirmeos/altmetrics/blob/master/docs/postman/altmetrics-API.postman_collection.json</li> </ul>"},{"location":"metrics-docs/onboarding-sending-metrics.en-GB/#getting-a-token","title":"Getting a token","text":"<p>Most requests to the Altmetrics API will need to validated with a JSON Web Token (JWT). The process of acquiring and using a JWT will be explained below. Please note: Your account will need to be approved before you can be issued a JWT.</p> <ul> <li>API endpoint: get token Method: GET</li> </ul> <p>Your request will need to be authenticated using basic authentication. This will use your login details as username:password, where username is the email you registered with and password is your password. Example: Assuming a user registers with the following credentials:</p> <pre><code>    email: test.user@gmail.com\n    password: test-password-123\n</code></pre> <ul> <li>With curl, this can be done as either:</li> </ul> <pre><code>$ curl -u test.user@gmail.com:test-password-123\n</code></pre> <ul> <li>Or using the base64 encoding of username-password:</li> </ul> <pre><code>$ curl --header \"Authorization: Basic dGVzdC51c2VyQGdtYWlsLmNvbTp0ZXN0LXBhc3N3b3JkLTEyMw==\"\n</code></pre>"},{"location":"metrics-docs/onboarding-sending-metrics.en-GB/#token-bearer-schema","title":"Token Bearer schema","text":"<p>Once you have a token, all requests to the Altmetrics API will require you to use this token to authenticate yourself. To do this, simply add the token to your request header, as follows.</p> <pre><code>Authorization: Bearer [token]\n</code></pre> <p>Where <code>[token]</code> represents your JWT.</p>"},{"location":"metrics-docs/onboarding-sending-metrics.en-GB/#where-to-go-from-here","title":"Where to go from here","text":"<p>If your organisation just wants to get authenticated into the Metrics API in order to send metrics, you can skip the following sub-sections and jump forward to the Metrics API docs. If (in addition to the above) your organisation also wants to use the Altmetrics service to gather more metrics for your DOIs, the sub-sections below explain how to send your DOIs (and the URLs associated with them) to the Altmetrics API. Your organisation will need to regularly send newly published DOIs to the Altmetrics API. We recommend to automate this process so that your publishing systems make a POST request to the Altmetrics API every time a new DOI is published.</p>"},{"location":"metrics-docs/onboarding-sending-metrics.en-GB/#interacting-with-the-altmetrics-service","title":"Interacting with the Altmetrics Service","text":"<ul> <li>Registering DOIs You can post the DOIs of works to the Altmetrics API. API endpoint: https://altmetrics.operas-eu.org/api/uriset Method: POST JSON format: The Altmetrics API expects to receive JSON, containing a list of DOIs in the format shown below. Each DOI can be registered with zero or more URLs.</li> </ul> <pre><code>[\n    {\n        \"doi\": DOI\n        \"url\": [\n            URL1,\n            URL2,\n            URL3,\n        ]\n    }\n]\n</code></pre> <p>Refer to postman JSON for an example call to this API endpoint.</p>"},{"location":"metrics-docs/onboarding-sending-metrics.en-GB/#querying-dois","title":"Querying DOIs","text":"<p>Check all DOIs associated with your user account. Remember to authenticate yourself with your JWT. API endpoint: https://altmetrics.operas-eu.org/api/uriset Method: GET Refer to postman JSON for an example call to this API endpoint.</p>"},{"location":"metrics-docs/onboarding-sending-metrics.en-GB/#sending-metrics-to-the-metrics-api","title":"Sending Metrics to the Metrics API","text":"<ul> <li>Measures and Definitions</li> </ul> <p>Metrics in the Metrics API are saved against a \u201cmeasure\u201d. These specify what metrics are being shown, and have a definition associated with them. The full list of measures currently supported by the OPERAS Metrics API can be viewed here: Measures API response.</p> <p>Before sending metrics to the Metrics API, you will need to make sure that there is a measure in the database that matches the metrics you would like to send. If not, we (Ubiquity) will need to add the new measures. In order to do this, you will need to send us details for each.</p> <p>Each measure consists of a source, type and description:  * Source: Where the metrics were collected from. * Type: A simple classifier for the metrics (e.g. views, downloads, or citations). * Description: This can be provided in several languages - the description explains exactly how the metrics were collected, and under what conditions, if applicable. </p> <p>Note: The \u201cType\u201d of each measure is used by the Metrics Widget to group similar metrics on the same graph.</p> <ul> <li>Structure of the Data Each unique metrics event is sent individually to the Metrics API. Multiple events are sent separately, as part of multiple API posts. </li> </ul> <p>Endpoint: Events </p> <ul> <li>Example: Generic structure of the API POST</li> </ul> <pre><code>curl --header \"Content-Type: application/json\" \\\n  --header \"Authorization: Bearer &lt;JWT TOKEN&gt;\" \\\n  --request POST \\\n  --data '&lt;METRICS EVENT JSON DATA&gt;' \\\n  https://metrics-api.operas-eu.org/events\n</code></pre> <ul> <li>Metrics event JSON data examples:</li> </ul> <pre><code>{\n  \"work_uri\": \"info:doi:10.5334/bbc\",\n  \"measure_uri\": \"https://metrics.operas-eu.org/oapen/downloads/v1\",\n  \"timestamp\": \"2017-04-01T00:00:00+0000\",\n  \"event_uri\": null,\n  \"country_uri\": \"urn:iso:std:3166:-2:BR\",\n  \"value\": 2,\n}\n\n{\n  \"work_uri\": \"info:doi:10.5334/bbc\",\n  \"measure_uri\": \"https://metrics.operas-eu.org//up-logs/downloads/v1\",\n  \"timestamp\": \"2022-06-01T00:00:00+0000\",\n  \"event_uri\": null,\n  \"country_uri\": null,\n  \"value\": 5,\n}\n</code></pre> <p>Fields that can be null: * \"event_uri\" - This is only present if additional information is required to reasonable validate the metrics event. e.g., link to a tweet or DOI of a citing article/book. * \"country_uri\" - This is set as null If country is unknown, or irrelevant (e.g., with a tweet or citation).</p>"},{"location":"metrics-docs/onboarding-users.en-GB/","title":"Onboarding users documentation","text":"<p>Follow the steps in this section to onboard your metrics to the OPERAS metrics system.</p>"},{"location":"metrics-docs/onboarding-users.en-GB/#key-terms-used-in-this-documentation","title":"Key terms used in this documentation:","text":"<ul> <li>User: Customer of the OPERAS Metrics service.</li> <li>Provider: Organisation hosting and maintaining the OPERAS Metrics service.</li> <li>Drivers: List of drivers.</li> <li>Identifiers: Identifier Translation Service.</li> <li>Measures: Different types of measures.</li> <li>Simulation Test: First run of the OPERAS Metrics to verify it works.</li> </ul>"},{"location":"metrics-docs/onboarding-users.en-GB/#technical-and-personnelskill-requirements-for-becoming-a-full-user-of-operas-metrics","title":"Technical and personnel/skill requirements for becoming a full user of OPERAS Metrics:","text":"<ul> <li>Basic bash knowledge.</li> <li>Postgres installation and creation of user and database.</li> <li>Basic data structures knowledge.</li> </ul>"},{"location":"metrics-docs/onboarding-users.en-GB/#servicesapps-used-in-this-documentation","title":"Services/Apps used in this documentation:","text":"<ol> <li>Services that must be setup Locally by the user:</li> <li>Metrics-drivers-wrapper</li> <li>Identifier Translator Service</li> <li> <p>Metrics Widget</p> </li> <li> <p>Services that will be managed by the provider:</p> </li> <li>AltMetrics Service</li> <li>Metrics-API</li> </ol>"},{"location":"metrics-docs/onboarding-users.en-GB/#steps-for-onboarding-a-user","title":"Steps for onboarding a User","text":"<ol> <li>User provides information about how views + downloads are being recorded.</li> </ol> <p>1.1. If views + downloads are not being recorded via Google Analytics, or Matomo (or another Measure already supported):</p> <pre><code>  1.1.1. Provider creates a new Measure in the Metrics API database.\n\n  1.1.2. Provider adds definition for new Measure to public website listing measures (or to this data: [Measures API response] [2] and have the public website run off that data).\n\n  1.1.3. User defines the yaml configuration with the correct data, i.e for the [Access Logs driver] [15].\n</code></pre> <ol> <li>User registers an account on the AltMetrics Service.</li> </ol> <p>2.1. Provider approves account to allow User to post metrics to Metrics API.</p> <p>2.2. User registers Identifiers on the Alt Metrics service for all existing content.</p> <p>2.3. User sets up periodic tasks to register Identifiers on the Alt Metrics Service for new content - EITHER:</p> <pre><code>  2.3.1. Use the existing method.\n\n  2.3.2. Create new local method and post to API.\n</code></pre> <ol> <li>User installs and sets up Identifier Translation Service</li> </ol> <p>3.1. User creates a local database</p> <p>3.2. User registers Identifiers on the Identifier Translation Service for all existing content</p> <p>3.3. User sets up periodic tasks to register Identifiers on the Identifier Translation Service for new content - EITHER:</p> <pre><code>  3.3.1. Use existing method\n\n  3.3.2. Create a new local method and post to the API.\n</code></pre> <ol> <li>User installs and sets up Metrics Drivers Wrapper</li> </ol> <p>4.1. User creates a local database</p> <p>4.2. User selects and configures the Drivers</p> <pre><code>  4.2.1. Refer to the drivers list above or the driver's page [Drivers][7] to select the drive(s) needed.\n</code></pre> <p>4.3. User sets Metrics Drivers Wrapper tasks to run periodically</p> <p>4.4. Provider sets up RabbitMQ virtual host for this User and sends settings</p> <ol> <li>Tests are run</li> </ol> <p>5.1. Provider gives instructions on how to run the Simulation Test</p> <p>5.2. User runs Simulation Test and sends output to Provider</p> <p>5.3. Provider explains the output to User</p> <p>5.4. User confirms if this is the output that was expected</p> <ol> <li>User installs and configures the metrics widget.</li> <li>User arranges a schedule for manually refreshing metrics.</li> <li>Be prepared to make software updates at the Provider\u2019s request (for performance, quality, or security improvements, or to extend the functionality)</li> <li>Please contact [Rowan Hatherley][21] or [Cristian Garcia][24] for any enquiries or issues.</li> </ol>"},{"location":"metrics-docs/onboarding-users.en-GB/#process-diagram-for-onboarding-user","title":"Process diagram for onboarding user","text":""},{"location":"metrics-docs/onboarding-users.en-GB/#follow-up","title":"Follow up","text":"<p>Once the system is working as expected to add the new metrics to the OPERAS system, follow the next documentation: Onboarding metrics</p>"},{"location":"metrics-docs/overview.en-GB/","title":"OPERAS Metrics System Overview","text":"<p>The software is designed to collect metrics from various sources and is divided into different sections, with the most prominent being the Metrics-drivers-wrapper which contains the packages called \u2018drivers\u2019. These drivers serve as entry point components, responsible for gathering data into the system. Following this, we have the \u2018plugins\u2019, which are used to normalize the collected data. Finally, the metrics are combined with the altmetrics and sent to the user interface, where they are displayed in a user-friendly Javascript widget. </p>"},{"location":"metrics-docs/overview.en-GB/#how-it-works","title":"How it works","text":"<p>This system is divided into different sections. Firstly, there are the drivers, which serve as the components responsible for gathering data into the system as entry points (refer to the point above to view the architecture diagram). In most cases, we connect to the source API to obtain the metrics, which is the preferred method. However, in two cases, we process a CSV file with metrics: 'Access Logs Local' and 'Google Books' (the latter is optional, as it can involve either web scraping Google Books or processing a CSV file uploaded by the user).</p> <p>Next, we have the plugins, which are responsible for processing this data. Normally, each plugin corresponds to a driver, except for 'JSTOR' and 'Access Logs' which fetch the data individually.</p> <p>'JSTOR' processes a user's CSV file, and 'Access Logs' performs a call to Google Cloud without any driver intervention. Subsequently, the metrics are saved to the database.</p> <p>Last but not least, we have a second database that combines the metrics  fetched by the drivers and plugins mentioned above, along with the altmetrics obtained from sites such as 'hypothes.is' and 'Wikipedia\u2019, among others.  Finally, these combined metrics are sent to the frontend for display in a widget.</p>"},{"location":"metrics-docs/overview.en-GB/#section-for-each-servicemodule","title":"Section for each service/module","text":""},{"location":"metrics-docs/overview.en-GB/#metrics-drivers-wrapper","title":"Metrics-drivers-wrapper","text":"<p>The most interesting modules are the Drivers and Plugins which are explained below:</p> <ul> <li> <p>Drivers: Drivers are independent modules that can be installed locally to   collect and normalize data from a given platform. The drivers are packages   located in PyPI, and you can install them with a single command, e.g.:   <code>pip install &lt;package_name&gt;</code>;</p> </li> <li> <p>Plugins: The plugins are responsible for normalizing the data collected    by the drivers. Initially, we retrieve the variables from a YAML file to aid   in this normalization and filtering process. Subsequently, a translator is   used to convert the relevant data into an acceptable URI identifier, after   which the data is saved to the database.</p> </li> </ul>"},{"location":"metrics-docs/overview.en-GB/#identifier-translation-service-and-tokens-api","title":"Identifier Translation Service and Tokens API","text":"<p>Used to normalize identifiers' data.</p> <p>The Identifier Translation Service is a JSON REST API to a database of publication URIs. The translation service maps works (publications) to URIs (e.g. <code>info:doi:10.11647/obp.0001</code>, <code>urn:isbn:9781906924010</code>, https://www.openbookpublishers.com/product/3) to allow converting from one identifier to another.</p>"},{"location":"metrics-docs/overview.en-GB/#centrally-managed-operas-metrics","title":"Centrally-managed OPERAS Metrics","text":"<p>This is the final step that involves combining the data gathered by drivers and plugins with the altmetrics retrieved from sources like Crossref Relationships API which is a separate service combining results from (Hypothes.is, Wikipedia, WordPress, etc.).</p>"},{"location":"metrics-docs/overview.en-GB/#how-to-install-configure-the-metrics-drivers-project","title":"How to install / configure the Metrics-Drivers project","text":"<p>There are two different ways of install and configure the system:</p>"},{"location":"metrics-docs/overview.en-GB/#production-environment-setup-use-docker","title":"Production environment setup, use Docker","text":"<p>There is a directory called <code>docker</code> where all the config files for this step are located to run the system as follows:</p> <p>Build docker image from the parent directory:</p> <pre><code>$ sudo docker build -t metrics-drivers -f docker/Dockerfile .\n\n\n- Desired output:\n...\n\nSuccessfully built 20d1a201d6ed\nSuccessfully tagged metrics-drivers:latest\n</code></pre> <p>Create environment file:</p> <pre><code>FLASK_APP=core\nFLASK_ENV=development\nCONFIG=DevConfig\n\nDRIVERS_SETTINGS_SOURCE='TEST'\nDB_USER=your_db_user\nDB_PASSWORD=your_db_password\nDB_HOST=your_db_host\nDB_NAME=your_db_name\nDB_PORT=your_db_port\n\nTOKENS_KEY=your_tokens_key\nTOKENS_EMAIL=your_tokens_email\nTOKENS_PASSWD=your_tokens_passwd\n\nALTMETRICS_USER=your_altmetrics_user\nALTMETRICS_PASSWORD=your_altmetrics_password\n\nTRANSLATION_API_BASE=your_translation_api_base\n\nREDIS_HOST=your_redis_host\nREDIS_PORT=your_redis_port\n\nRMQ_AMQ_SCHEME=your_rmq_amq_scheme\nRMQ_USER=your_rmq_user\nRMQ_PASSWORD=your_rmq_password\nRMQ_HOST=your_rmq_host\nRMQ_PORT=your_rmq_port\nRMQ_VHOST=your_rmq_vhost\n\nCONSUL_HOST=your_consul_host\nCONSUL_TOKEN=your_consul_token\n\nSENTRY_DSN=your_sentry_dsn\n\nMETRICS_API_BASE=your_metrics_api_base\n</code></pre> <p>Execute the container:</p> <pre><code>- docker run --env-file docker/env.docker -it --rm -p 80:80 metrics-drivers\n</code></pre>"},{"location":"metrics-docs/overview.en-GB/#install-every-component-locally","title":"Install every component locally","text":"<p>The second option is meant to be for developers which involves installing locally as a step-to-step installation, therefore previous knowledge of Python, Flask and microservices would be ideal.</p> <p>Please, make sure you\u2019ve gone through the system requirements specified in section 2 of this documentation before proceeding with the setup.</p> <p>First, clone the repository metrics-drivers: https://gitlab.com/ubiquitypress/metrics-drivers-wrapper</p> <p>Set up a virtual environment:</p> <p>with Pyenv</p> <pre><code>- $ pyenv virtualenv 3.10.6 &lt;name&gt;\n</code></pre> <p>with Venv</p> <pre><code>- $ virtualenv [directory]\n- $ source myvenv/bin/activate\n</code></pre> <p>Install requirements</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Create a file <code>~/.bash_aliases</code>, with the content:</p> <pre><code># ==========================\n\n# METRICS-DRIVERS-DB-WRAPPER\n\n# ==========================\n\nalias go2metrics-service=\"cd ~/Documents/projects/metrics-drivers-wrapper; pyenv activate metrics-drivers\"\n\nalias with_md_env_=\"~/.bash_scripts/load_metrics_drivers_env.bash\"\nalias with_md_env_test=\"~/.bash_scripts/load_metrics_drivers_env_test.bash\"\n\nalias flask_metrics_=\"with_md_env_ flask\"\nalias flask_metrics_shell=\"with_md_env_ flask shell\"\nalias flask_metrics_run_tests=\"with_md_env_test python -m unittest discover core.tests -t . -v\"\n</code></pre> <p>Create a directory in <code>~/.bash_scripts</code>; Create a file called: <code>load_metrics_drivers_env.bash</code> with the content below:</p> <pre><code>export FLASK_APP=core\nexport FLASK_ENV=development\nexport CONFIG=DevConfig\n\n\nexport RMQ_HOST=localhost\u00a0\u00a0\nexport RMQ_VHOST=metrics\nexport RMQ_PASSWORD=password\u00a0\nexport RMQ_USER=user\n\n\nexport DB_USER='your-user'\nexport DB_PASSWORD='your-password'\nexport DB_HOST='localhost'\nexport PORT='5432'\nexport DB_NAME='metrics-drivers'\n\n\n# Live Values\n\nexport TOKENS_KEY=\u201d\u201d\nexport TRANSLATION_API_BASE=\u201d\"\nexport DRIVERS_SETTINGS_SOURCE='YAML'\n</code></pre> <p>Make the above script executable:</p> <pre><code>chmod u+x ~/.bash_scripts/load_metrics_drivers_env.bash\n</code></pre> <p>Add this line to your <code>~/.bashrc</code> file and restart the shell:</p> <pre><code>source ~/.bash_aliases\n</code></pre> <p>Run Database migrations (in your metrics drivers wrapper src folder):</p> <pre><code>flask_metrics_ db upgrade\n\n- Sample output:\n\nINFO [alembic.runtime.migration] Context impl PostgresqlImpl.\n\nINFO [alembic.runtime.migration] Will assume transactional DDL.\n</code></pre> <p>Execute the Flask shell to make sure you have access (check whether there are any errors):</p> <pre><code>flask_metrics_shell\n\n\n- Sample output:\n\nPython 3.10.13 (main, Sep 27 2023, 10:58:53) [GCC 13.2.1 20230801] on linux\n\nIPython: 8.15.0\nApp: core\nInstance: &lt;your metrics-drivers directory&gt;\n\nIn [1]:\n</code></pre> <p>Create a test script file: <code>~/.bash_scripts/load_metrics_drivers_env_test.bash</code> with the below content:</p> <pre><code>#!/bin/bash\n\nexport FLASK_APP=core\nexport FLASK_ENV=development\nexport CONFIG=TestConfig\n\n\nexport DB_USER='test-db-user'\nexport DB_PASSWORD='test-db-password'\nexport DB_HOST='localhost'\nexport PORT='5432'\n\nexport DB_NAME='metrics-drivers-test'\nARGS=(\"$*\")\n\n$ARGS\n</code></pre> <p>Make the above script executable:</p> <pre><code>chmod u+x ~/.bash_scripts/load_metrics_drivers_env_test.bash    \n</code></pre> <p>Finally, run your tests:</p> <pre><code>$ flask_metrics_run_tests\n\n- Desired output:\n\n----------------------------------------------------------------------\n\nRan 13 tests in 0.835s\n\nOK\n</code></pre>"},{"location":"metrics-docs/server-access-logs.en-GB/","title":"Server Access Logs","text":"<p>This is a plugin, not a driver, which implies that no installation from PyPI is required.</p> <p>The plugin  includes a module named <code>logic.py</code>, which is intended to become a part of the Python library for the access logs driver in the future.</p> <p>Such module mentioned aboveis responsible for gathering credentials from the plugin and executing a call to Google Cloud. This call is made to retrieve and subsequently list the entries as requested, applying appropriate filters.</p> <p>In conclusion, the plugin will invoke each method from <code>logic.py</code> in a service-like manner to filter the metrics before saving them in the Event table within the database.</p>"},{"location":"metrics-docs/server-access-logs.en-GB/#plugin-variables-description","title":"Plugin Variables Description","text":"Variable Description <code>active</code> The plugin will not run if this is set to false, boolean. <code>start_date</code> The date that you want to first pull results the first time the plugin runs, a string. <code>type</code> json_key child, service_account, string. <code>project_id</code> json_key child, id of the project, string <code>private_key_id</code> json_key child, private key id to grant access, string. <code>private_key</code> json_key child, private key to grant access, string. <code>client_email</code> json_key child, from google docs: '[YOUR-PROJECT-NUMBER]-[YOUR-KEY@DEVELOPER].gserviceaccount.com', string. <code>client_id</code> json_key child, '[YOUR-CLIENT-ID],', string. <code>auth_uri</code> json_key child, typically: \"https://accounts.google.com/o/oauth2/auth\". <code>token_uri</code> json_key child, typically: \"https://accounts.google.com/o/oauth2/token\". <code>auth_provider_x509_cert_url</code> json_key child, \"{x509-cert-url}\", string. <code>client_x509_cert_url</code> json_key child, \"{client-x509-cert-url}\", string. <code>measure</code> measure_regexes child, nmeasures available in the API, string. <code>order</code> measure_regexes child, order of the measure, integer. <code>regex</code> measure_regexes child, regexes to search by, string. <code>request_host_filter</code> Used for the method <code>calculate_request_hosts</code>, string. <code>request_path_filter</code> Path at the end of the request, string."},{"location":"metrics-docs/server-access-logs.en-GB/#example-of-plugin-configuration-file","title":"Example of plugin configuration file:","text":"<pre><code>json_key:\n  type: service_account\n  project_id: test-accesslogs\n  private_key_id: test\n  private_key: 'test'\n  client_email: test@test.com\n  client_id: '999999999999999999999'\n  auth_uri: https://accounts.google.com/o/oauth2/auth\n  token_uri: https://auth.test.com\n  auth_provider_x509_cert_url: https://www.auth.provider.test.com\n  client_x509_cert_url: https://www.client.test.com\nmeasure_regexes:\n  downloads:\n    measure: https://measure.test.com\n    order: 0\n    regex: /site/(books|chapters)/10.\\d{4,9}/[-._;(/:A-Za-z0-9]+/download/\\d+\n  reads:\n    measure: https://reads.test.com\n    order: 1\n    regex: /site/(books|chapters)/10.\\d{4,9}/[-._;()/:A-Za-z0-9]+/read\n  views:\n    measure: https://views.test.com\n    order: 2\n    regex: /site/(books|chapters)/([em]/)?10.\\d{4,9}/[-._;()/:A-Za-z0-9]+\nrequest_host_filter: www.test.com OR test.com\nrequest_path_filter: (\"/site/books\" OR \"/site/chapters\") AND NOT (\"metrics\" OR \"indexer\"\n  OR \"citation\" OR \"filter\")\nstart_date: '20000-01-01'\n\nactive: false\n</code></pre>"},{"location":"metrics-docs/tokens-api.en-GB/","title":"JWT API","text":"<p>A very simple API that issues JSON Web Tokens to users registered in a hirmeos/tokens_db database.</p> <p>These tokens can be used by other services (such as hirmeos/identifier_translation_service) to authenticate users via the <code>Authorization</code> HTTP header (<code>Bearer</code> type). To do so, one must share the private key used to issue the tokens with all the services that will use JWT.</p> <ul> <li>API Source: https://github.com/hirmeos/tokens_api</li> <li>API Image: https://hub.docker.com/r/openbookpublishers/tokens_api</li> <li>Database Source: https://github.com/hirmeos/tokens_db</li> <li>Database Image: https://hub.docker.com/r/openbookpublishers/tokens_db</li> </ul>"},{"location":"metrics-docs/tokens-api.en-GB/#setup","title":"Setup","text":""},{"location":"metrics-docs/tokens-api.en-GB/#environment-variables","title":"Environment variables","text":"<p>The following environment variables may be set. If you're running the service using docker-compose, you may use different files to separate API-specific variables from database's. All variables must be set.</p> Variable Description <code>API_DEBUG</code> Boolean flag to output debugging lines to the console. <code>SECRET_KEY</code> An up to 255 bytes random key, shared with services requiring authentication <code>TOKEN_LIFETIME</code> Number of seconds before a token expires. <code>PBKDF2_ITERATIONS</code> Number of PBKDF2 iterations - the more the merrier. <code>DB_HOST</code> The address of the host where the tokens      database runs. <code>DB_DB</code> The name of the tokens database. <code>DB_USER</code> The user name of the tokens database. <code>DB_PASS</code> The password of the tokens database. <code>ALLOW_ORIGIN</code> String with a domain name to be included in CORS headers."},{"location":"metrics-docs/tokens-api.en-GB/#running-with-docker-compose","title":"Running with docker-compose","text":"<p>The easiest way to get a fully featured and functional setup is using a docker-compose file, since the API depends on the hirmeos/tokens_db database.</p> <pre><code>version: \"3.5\"\n\nservices:\n  tokens_db:\n    image: openbookpublishers/tokens_db:1\n    container_name: \"tokens_db\"\n    restart: unless-stopped\n    volumes:\n      - db:/var/lib/postgresql/data\n    env_file:\n      - ./config/db.env\n\n  tokens_api:\n    image: openbookpublishers/tokens_api:1\n    container_name: \"tokens_api\"\n    restart: unless-stopped\n    ports:\n      - 8282:8080\n    environment:\n      - DB_HOST=tokens_db\n    env_file:\n      - ./config/api.env\n      - ./config/db.env\n    depends_on:\n      - tokens_db\n\nvolumes:\n  db:\n</code></pre> <p>Notes: - The example uses the docker images already built and used by Open Book Publishers. You may use the provded docker files to build your own, instead. - You may of course use whatever port you like, and/or use a proxy server (e.g. nginx) to handle the API endpoint. - The <code>db</code> volume ensure the contents of the database persist when restarting/deleting the container. - In this example we use two sets of configuration files, one with database credentials shared with both containers, the other one with API configuration only available to the API container. You may use a single file with all environment variables.</p>"},{"location":"metrics-docs/tokens-api.en-GB/#create-the-first-user-account","title":"Create the first user account","text":"<p>Account registration is only allowed via HTTP (<code>POST /accounts</code>) after at least one account has been registered via CLI, i.e. HTTP registration requires a token, which are only issued to accounts.</p> <p>The easiest way is to run python on the api container:</p> <pre><code>docker exec -it tokens_api python\n</code></pre> <p>Then call the <code>create_account()</code> method in <code>AccountController()</code>:</p> <pre><code>from api import *\naccountctrl.AccountController.create_account(\"email@obp.com\", \"secure_password\", \"acct:user@domain\", \"Name\", \"Surname\", \"admin\")\n</code></pre>"},{"location":"metrics-docs/tokens-api.en-GB/#api-routes","title":"API routes","text":"<p>The following methods are allowed:</p> Method Route Description <code>POST</code> <code>/tokens</code> Log in - request a token. <code>POST</code> <code>/accounts</code> Create an account. <code>GET</code> <code>/tokens</code> Check whether a token is valid."},{"location":"metrics-docs/tokens-api.en-GB/#post-accounts-parameters","title":"<code>POST /accounts</code> parameters","text":"<p>When creating an account you must provide a JSON object with all of the following attributes:</p> Parameter Description account_id The unique identifier of this user, in URI format (e.g. 'acct:user@domain'). It doesn't need to match the email address. email The email address of the user. It is Email and password are the crendentials. password The password used to obtain tokens afterwards (along with the email address). name A concatenation of filters of type <code>work_type</code>, <code>uri_scheme</code>, <code>canonical</code> allows refining the query. surname A concatenation of filters of type <code>work_type</code>, <code>uri_scheme</code>, <code>canonical</code> allows refining the query. authority The user type (by default the database is populated with \"admin\", \"user\" and \"guest\")."},{"location":"metrics-docs/tokens-api.en-GB/#post-tokens-parameters","title":"<code>POST /tokens</code> parameters","text":"<p>Tokens can be obtained making a POST request to <code>/tokens</code>, providing \"email\" and \"password\" with values equal to those used in account creation.</p> Parameter Description email The email address of the user authenticating. password The password used to authenticate this user."},{"location":"metrics-docs/tokens-api.en-GB/#debugging","title":"Debugging","text":"<p>You may set env variable <code>API_DEBUG</code> to <code>True</code> in order to enable debugging</p>"},{"location":"metrics-docs/unglueit.en-GB/","title":"Unglue.it Driver","text":"<p>Driver to retrieve metrics from the Unglue.it portal.</p> <p>Install the driver as a package from PyPI by visiting the following link on pypi.</p> <p>Get the api key from: https://unglue.it/api/help</p> <p>NOTE: The Unglue.it API doesn\u2019t support filtering by date and returns the total downloads for a given ISBN, so new downloads need to be calculated by comparing the API results to what we already have saved in the database.</p>"},{"location":"metrics-docs/unglueit.en-GB/#plugin-variables-description","title":"Plugin Variables Description","text":"Variable Description <code>active</code> The plugin will not run if this is set to false, boolean. <code>start_date</code> The date that you want to first pull results the first time the plugin runs, a string. <code>uri_scheme</code> Uri scheme to save results against, string. <code>api_key</code> Api key got from https://unglue.it/api/help after creating a user, string. <code>user</code> User created on unglue.it. <code>publisher</code> Publisher identifier, integer. service."},{"location":"metrics-docs/unglueit.en-GB/#example-of-a-yaml-file","title":"Example of a yaml file:","text":"<pre><code>api_key: \"3a352e55314b4665b8fab68135ebef57\" \nuser: \"test.user\" \npublisher: 1 \nuri_scheme: \"info:doi\"\nactive: true\n</code></pre>"},{"location":"metrics-docs/widget.en-GB/","title":"Widget","text":""},{"location":"metrics-docs/widget.en-GB/#introduction","title":"Introduction","text":"<p>The OPERAS metrics widget is a small, embeddable HTML widget which can offer visual information from services such as Google Analytics, OPERAS, and Ubiquity in the form of graphs, tables, and numerical figures.</p> <p>The widget is designed to be extremely flexible with its implementation, allowing almost complete configuration to be made without needing to touch the source code.</p> <p>Implementing the widget requires:</p> <ul> <li>knowledge of the URIs the metrics are hosted on \u2014 this should be provided to you before implementing the widget</li> <li>basic knowledge of HTML (to embed the widget) and JavaScript (to configure the widget)</li> </ul>"},{"location":"metrics-docs/widget.en-GB/#getting-started","title":"Getting Started","text":""},{"location":"metrics-docs/widget.en-GB/#html","title":"HTML","text":"<p>The first step is to add a HTML element to the page which will contain the widget:</p> <pre><code>&lt;div id=\"metrics-widget\"&gt;&lt;/div&gt;\n</code></pre> <p>The widget is configured by default to search for an element with an <code>id</code> attribute of <code>metrics-widget</code>. This can be re-configured later.</p>"},{"location":"metrics-docs/widget.en-GB/#javascript","title":"JavaScript","text":"<p>The next step is to add the widget script logic. Within the page, add the following:</p> <pre><code>&lt;script&gt;\n  window.operaswidget = (e =&gt; {\n    if (document.getElementById(e)) return window.operaswidget;\n    let t = document.createElement('script');\n    (t.id = e),\n      (t.src =\n        'https://storage.googleapis.com/operas/metrics-widget/v1/latest/widget.js');\n    let r = document.getElementsByTagName('body')[0];\n    r.appendChild(t);\n    let i = window.operaswidget || {};\n    return (\n      (i.eventQueue = []),\n      (i.ready = e =&gt; {\n        i.eventQueue.push(e);\n      }),\n      i\n    );\n  })('operas-metrics');\n&lt;/script&gt;\n</code></pre> <p>This script does two main things:</p> <ul> <li>imports the <code>widget.js</code> script containing the core logic of the widget.</li> <li>creates a window object called <code>operaswidget</code> which allows you to [un]subscribe to custom widget events, discussed in the events section.</li> </ul> <p>\u2692\ufe0f The minified version of the script above is recommended to improve performance, but you can also use or modify the unminified version.</p> <p>\u2139\ufe0f\u00a0In the example above, you will automatically receive the latest changes to the widget in the <code>v1</code> release. If you wish to change or understand this behaviour, see Versioning.</p> <p>Once you\u2019ve added the <code>&lt;script&gt;</code> tag, you should see the following message in your browser console:</p> <p>Error loading widget: Could not find a script with ID <code>operas-metrics-config</code>.</p> <p>This means that the widget was successfully imported, and in the next section we\u2019ll look at adding the configuration.</p>"},{"location":"metrics-docs/widget.en-GB/#css","title":"CSS","text":"<p>The final step is to import the widget\u2019s CSS:</p> <pre><code>&lt;link\n  rel=\"stylesheet\"\n  href=\"https://storage.googleapis.com/operas/metrics-widget/v1/latest/widget.css\"\n/&gt;\n</code></pre> <p>The widget has been designed with CSS Variables in mind, meaning you should be able to easily override the primary colours (discussed in the theming section).</p> <p>Although it is recommended to use the default CSS and modify any classes where required, the widget can fully operate without the default stylesheet and you are welcome to create your own styles instead.</p> <p>All classes within the widget are prefixed with <code>mw__</code> to avoid any style conflicts.</p> <p>\u2139\ufe0f\u00a0Similar to the JavaScript code, you can also use either <code>latest</code> to always use the latest version of the widget\u2019s CSS, or provide a specific version instead.</p>"},{"location":"metrics-docs/widget.en-GB/#versioning","title":"Versioning","text":""},{"location":"metrics-docs/widget.en-GB/#semantic-versioning","title":"Semantic Versioning","text":"<p>The widget uses semantic versioning. For example, if a release was labelled <code>1.2.3-alpha.4</code>:</p> <ul> <li><code>1</code>\u00a0is\u00a0the\u00a0major\u00a0version\u00a0number. It\u00a0is\u00a0incremented\u00a0when\u00a0there\u00a0are\u00a0breaking\u00a0changes.</li> <li><code>2</code>\u00a0is\u00a0the\u00a0minor\u00a0version\u00a0number. It\u00a0is\u00a0incremented\u00a0when\u00a0functionality\u00a0is\u00a0added\u00a0in\u00a0a\u00a0backwards-compatible\u00a0manner.</li> <li><code>3</code> is\u00a0the\u00a0patch\u00a0version\u00a0number. It\u00a0is\u00a0incremented\u00a0when\u00a0backwards-compatible\u00a0bug\u00a0fixes\u00a0are\u00a0made.</li> <li><code>alpha</code> indicates\u00a0a\u00a0pre-release\u00a0version., which may be\u00a0unstable\u00a0and\u00a0might\u00a0not\u00a0satisfy\u00a0the\u00a0intended\u00a0compatibility\u00a0requirements.</li> <li><code>4</code> is\u00a0the\u00a0pre-release\u00a0version's\u00a0iteration.</li> </ul>"},{"location":"metrics-docs/widget.en-GB/#cdn-paths","title":"CDN Paths","text":"<p>Widget versioning is handled by grouping releases into their major versions, followed by the full semantic version of each release. For instance:</p> <p>https://storage.googleapis.com/operas/metrics-widget/v1/1.0.0/widget.js</p> <p>This path contains release <code>1.0.0</code> (no pre-release version). All releases within major version <code>1</code> will be available in the <code>/v1/</code> directory.</p> <p>Every major version directory also contains a <code>latest</code> \u201dversion\u201d, which is simply a directory that contains files for the latest version within that group. For example, if the latest <code>/v1/</code> release was *1.2.3*, instead of manually updating that, you can simply use:</p> <p>https://storage.googleapis.com/operas/metrics-widget/v1/latest/widget.js</p> <p>Because minor and patch changes do not include breaking changes, you can safely use the <code>latest</code> version to keep the widget up-to-date without needing to manually change for every version.</p> <p>When breaking changes are released, they will be versioned under a new major version directory (eg. <code>/v2/2.0.0</code>). You will need to manually update to this new version if you are on a previous major version.</p> <p>Note that if you are using the <code>latest</code> version, by default the <code>cdn_scripts_url</code> and <code>cdn_images_url</code> in the widget Settings will still link to the represented version folders rather than the <code>/latest/</code> directory. If this is unwanted, you can overwrite the defaults for those variables to replace <code>{version}</code> with <code>latest</code>.</p> <p>And of course, there is no obligation to stick to the <code>latest</code> version, and using hard-coded version URLs will work just as well.</p>"},{"location":"metrics-docs/widget.en-GB/#custom-cdn","title":"Custom CDN","text":"<p>If you wish to host the core script on your own CDN, you can simply replace the URL in the Getting Started script with your own.</p> <p>Additional scripts and images are hosted in sub-directories, but you can overwrite those in the widget Settings by providing a custom <code>cdn_scripts_url</code> and <code>cdn_images_url</code> which links to your own CDN.</p> <p>These strings support custom variables which will be replaced at runtime:</p> <ul> <li><code>{major}</code>: the major version</li> <li><code>{minor}</code>: the minor version</li> <li><code>{patch}</code>: the patch version</li> <li><code>{version}</code>: the full version string</li> <li><code>{preRelease}</code>: the pre-release version number</li> </ul> <p>For instance, you can see this being used in the default value for <code>cdn_scripts_url</code>:</p> <p>https://storage.googleapis.com/operas/metrics-widget/v{major}/{version}/scripts</p> <p>At runtime, <code>{major}</code> and <code>{version}</code> will be replaced with whatever version was defined in the project\u2019s <code>package.json</code> during build time:</p> <p>https://storage.googleapis.com/operas/metrics-widget/v1/1.0.0/scripts</p> <p>*this may show a 404 as there is no index file for this directory</p>"},{"location":"metrics-docs/widget.en-GB/#configuration","title":"Configuration","text":"<p>In order for the widget to run, it relies on another <code>&lt;script&gt;</code> tag containing its configuration in JSON format.</p> <p>On the same page as the widget, add an empty JSON script:</p> <pre><code>&lt;script type=\"application/json\" id=\"operas-metrics-config\"&gt;\n  {}\n&lt;/script&gt;\n</code></pre> <p>Note that the <code>id</code> attribute <code>operas-metrics-config</code> is not configurable and must be named exactly.</p>"},{"location":"metrics-docs/widget.en-GB/#structure","title":"Structure","text":"<p>The configuration object is broken down into five fields:</p> field type purpose settings object holds all core settings for the widget options object holds any customisation options for the widget\u2019s behaviour tabs array an array of all the tabs that should be shown on the widget locales object an object containing any localisation overrides or custom localisations components object an object allowing you to override certain components with React components <p>In practice, this may look something like this:</p> <pre><code>&lt;script type=\"application/json\" id=\"operas-metrics-config\"&gt;\n  {\n      \"settings\": { ... },\n      \"options\": { ... },\n      \"tabs\": [ ... ],\n      \"locales\": { ... },\n      \"components\": { ... }\n    }\n&lt;/script&gt;\n</code></pre>"},{"location":"metrics-docs/widget.en-GB/#settings","title":"Settings","text":"<p>The settings object contains all of the critical information the widget requires to work.</p> <p>All of the properties within the <code>settings</code> field have default values that should allow almost all implementations to work without even defining this field in the configuration object.</p> <p>Unless otherwise instructed, it\u2019s likely the only setting you\u2019ll need to specify is the <code>locale</code>.</p> field type default value description base_url string https://metrics-api.operas-eu.org/events a link to the API that provides the metrics element_id string metrics-widget the widget will be rendered within the DOM element that has this id attribute locale string en-US the locale to render the widget in(see Locales for more information on how this property works) cdn_scripts_url string https://storage.googleapis.com/operas/metrics-widget/v{major}/{version}/scripts a link to the directory containing additional widget scripts (eg. chartjs, jquery, jvectormap, etc.)these scripts are loaded on an as-needed basis in order to keep the core bundle size smaller.more information about the variables available in this string can be found under Versioning. cdn_images_url string https://storage.googleapis.com/operas/metrics-widget/v{major}/{version}/images a link to the directory containing the required widget images (eg. hypothesis-logo.png). more information about the variables available in this string can be found under Versioning. <p>For <code>cdn_scripts_url</code> and <code>cdn_images_url</code>, the <code>{version}</code> variable in the URL will be automatically replaced by the version of the widget you are running (as defined in the Getting Started section). This isn\u2019t needed, but recommended to prevent a mismatch between file versions.</p> <p>\u2139\ufe0f\u00a0If you are using the auto-updating <code>-latest</code> version of the widget, the <code>{version}</code> will be replaced with the actual version number of the widget. So if the latest version is <code>1.0.0</code>, the variable will be replaced with <code>1.0.0</code>.</p>"},{"location":"metrics-docs/widget.en-GB/#options","title":"Options","text":"<p>The options object allows you to configure the general behaviour widget.</p> field type default value description default_graph_width number 100 the default percentage width of a graph, if it does not have its own width property hide_initial_loading_screen boolean false if true, the widget will remain hidden until all navigation data has been loaded load_graph_data_immediately boolean false if true, the data for each graph begin to load as soon as the widget is ready, even if the tab is closedif false, data for each graph will only begin loading once it should be visible (aka. the tab is opened) open_first_tab_by_default boolean false if true, the first navigation tab will be opened by default locale_fallback_type string(mixed|standard) mixed if the provided Settings doesn\u2019t have any available translations, the widget will fallback to a supported language.the fallback method is determined by this variable, either mixed or standard:- if mixed, the widget will always display browser-localisable strings (such as dates, numbers, and country names) in the language set by settings.locale, even if that locale has no text translations.- if standard, the widget will display browser-localisable strings in whatever language the widget had to fall back to"},{"location":"metrics-docs/widget.en-GB/#tabs","title":"Tabs","text":"<p>Within the widget, a tab is considered to be a single item shown in the navigation (eg. downloads, sessions, reads \u2026) that, when clicked, will open a panel below the navigation with graphs:</p> <p></p> <p>There are two tabs in this image: the <code>Sessions</code> tab (red outline), which is toggled open to reveal its graphs, and the <code>Downloads</code> tab (green outline) which is not toggled open but still appears in the navigation.</p> <p>A <code>Tab</code> object contains the following properties:</p> field required type description id yes string the unique id of the tab, primarily used for accessibility purposes name yes string the display name of the tab, shown in the navigation order no number the display order of the tab in the navigation scopes yes object every key in this object represents a metrics \u201cscope\u201d - see below for more information graphs yes array(Graph) an array containing every graph that will be rendered within the panel of this tab (see below)"},{"location":"metrics-docs/widget.en-GB/#scopes","title":"Scopes","text":"<p>The <code>scopes</code> object allows you to group together specific metrics endpoints.</p> <p>Each graph allows you to specify which scope(s) should provide its data, meaning that you can have additional flexibility for every graph.</p> <p>\u2139\ufe0f\u00a0When a tab is rendered in the navigation pane, the count value shown will be the total value of all <code>scopes</code> for that tab. In the image above, 1,802 is the total value of all scopes for that tab.</p> <p>The object should be formatted in the following way:</p> <pre><code>\"name-of-scope\": {\n    // .. properties ..\n}\n</code></pre> <p>The following properties are accepted within your scope:</p> field required type description works yes array(<code>string</code>) an array of the work URI tags that are part of the data for this scope. these will likely be given to you, and will look like any (or all) of these:- <code>info:doi:10.5334/bbc.a</code>- <code>urn:uuid:b2e02743-2b36-4018-821c-55daa5305cf6</code>- <code>tag:ubiquitypress.com,2022</code> measures yes array(<code>string</code>) an array of the measure_uris to include in the counts for this metricin essence, the API will respond with counts for all available metrics, such as <code>up-logs/downloads</code>, <code>up-logs/sessions</code>, <code>up-logs/</code>... and so on. in order to filter out metrics which aren\u2019t relevant to your scope, you should provide a \u201cwhitelist\u201d array of the ones that you do want to include.the widget will do a broad match for this, so if the measure_uri in the API response is https://metrics.operas-eu.org/up-ga/downloads/v1, and you have provided <code>up-ga/downloads</code>, or even just downloads as a measure, it will match.be careful not to be too vague with your URIs; simply writing up-ga would result in the widget including all Google Analytics metrics (downloads, sessions, logs, etc.) in the data. a good rule of thumb is to include the provider and type: <code>up-ga/downloads</code>. title no <code>string</code> some graphs will show the title of each scope if it isn\u2019t merging the values together. for instance, a stacked line graph might display multiple different values on a single chart - this is when the title field would be displayed.an example of this is below. startDate no <code>string</code> the date to begin counting metrics from; useful if you are migrating from one provider to another and don\u2019t want duplicate counts. the value must be parsable into a <code>Date()</code> call.as an example, a <code>startDate</code> set to <code>\"2023-07-01\"</code> will only begin counts within the scope that are on or after 1 July, 2023. endDate no <code>string</code> the date to stop counting metrics from; useful if you are migrating from one provider to another and don\u2019t want duplicate counts. the value must be parsable into a <code>Date()</code> call.as an example, an <code>endDate</code> set to <code>\"2023-07-01\"</code> will stop counting values with a date on or after 1 July, 2023. <p></p> <p>A stacked line graph with three different scopes. Each scope has specified a <code>title</code> property, outlined in red.</p> <p>The main benefit of the <code>scopes</code> object is that you can separate your metrics into isolated values, which you can then decide which scopes should be sent to your graphs.</p> <p>One very common use-case for scopes is for book chapters. Imagine you might have a book with DOI <code>10.5334/bbc</code> that also has DOIs for each of its chapters as well: [<code>10.5334/bbc.a</code>, <code>10.5334/bbc.b</code>, <code>10.5334/bbc.c</code>, \u2026].</p> <p>If we knew we wanted to merge all of our chapter-related data into a single metric (eg. a line graph that only has one line containing the cumulative amounts), we can simply add them all to the same scope. We just list our DOIs as <code>works</code>, and then include the <code>measures</code> array to tell the widget what measures to include from each of these (eg. you may want <code>up-ga/sessions</code> but not <code>up-ga/downloads</code>):</p> <pre><code>\"sessions_scope\": {\n    \"works\": [\n        \"info:doi:10.5334/bbc\",\n        \"info:doi:10.5334/bbc.a\",\n        \"info:doi:10.5334/bbc.b\",\n        ...\n    ],\n  \"measures\": [\"up-ga/sessions\" \"up-logs/sessions\"]\n}\n</code></pre> <p>In this case, the scope is named <code>sessions_scope</code>, but the name of the scope can be anything - so long as it\u2019s unique within the tab.</p> <p>Once we render our graph (which will be explained in the next section), we will simply tell it which scope(s) we want to use:</p> <pre><code>\"graphs\": [\n    {\n        \"id\": \"line_graph\",\n        \"type\": \"line\",\n        \"title\": \"Sessions over time\",\n        \"scopes\": [\"sessions_scope\"] // &lt;-- our graph uses the `sessions_scope`\n    }\n]\n</code></pre> <p>The graph in this example will now have access to the metrics data from the book\u2019s DOI and all of its\u2019 chapters from the <code>up-ga/sessions</code> and <code>up-logs/sessions</code> measures.</p> <p>Let\u2019s say, however, you wanted to separate your data out. For instance, you might want to have two separate line graphs, or one line graph with stacked values (multiple lines). One dataset for the book\u2019s views, and one dataset for its chapter views. In this case, we\u2019ll need to split our DOIs into multiple scopes, like this:</p> <pre><code>{\n    \"book_sessions\": {\n        \"works\": [\"info:doi:10.5334/bbc\"],\n    \"measures\": [\"up-ga/sessions\"]\n    },\n    \"chapter_sessions\": {\n        \"works\": [\"info:doi:10.5334/bbc.a\", \"info:doi:10.5334/bbc.b\", ...],\n    \"measures\": [\"up-logs/sessions\"]\n    }\n}\n</code></pre> <p>Here, we\u2019ve created two scopes: <code>book_sessions</code>; which will have the data for the book as a whole, and <code>chapter_sessions</code>; which will have the data for all of our chapters. Again, these scopes can be named anything, so long as the names are unique within the tab.</p> <p>When we render our graph objects (again covered in the next section), we again simply pass in whatever scope we want that graph to render data for:</p> <pre><code>\"graphs\": [\n    {\n        \"id\": \"line_graph_book_sessions\",\n        \"type\": \"line\",\n        \"title\": \"Book sessions over time\",\n        \"scopes\": [\"book_sessions\"]\n    },\n    {\n        \"id\": \"line_graph_chapter_sessions\",\n        \"type\": \"line\",\n        \"title\": \"Chapter sessions over time\",\n        \"scopes\": [\"chapter_sessions\"]\n    }\n]\n</code></pre> <p>In this example, we have two separate graphs: one line graph that receives the <code>book_sessions</code> scope (meaning it only renders data related to the book), and another line graph that receives our <code>chapter_sessions</code> scope (which will render metrics from all of our chapters, but not the book itself).</p> <p>Graph objects aren\u2019t just limited to one scope either \u2014 if you suddenly needed to merge your <code>book_sessions</code> and <code>chapter_sessions</code> scopes into one graph, you\u2019d have two options:</p> <ol> <li>Add a new scope, something like combined_sessions, and pass that to the graph</li> <li>Simply pass both <code>book_sessions</code> and <code>chapter_sessions</code> into the graph!</li> </ol> <p>There also are no limits on how many scopes you make either, so if you wanted to be extremely specific, there is nothing stopping you splitting all the URIs in <code>chapter_sessions</code> into their own sessions, like <code>chapter_sessions_a</code>, <code>chapter_sessions_b</code>, \u2026 and so on. This could allow you to make a stacked graph for every chapter individually, or dynamically update the config depending on which chapter a user is viewing.</p> <p>\u2139\ufe0f\u00a0The widget is designed to be as optimal as possible with network requests, caching responses in-memory. This means if you have multiple requests for the same data, only one network request will actually be made.</p>"},{"location":"metrics-docs/widget.en-GB/#graphs","title":"Graphs","text":"<p>Within the <code>tabs</code> object of your widget config, each tab must provide an array containing graph objects. For every graph listed in the array, it\u2019ll appear within the tab when opened.</p> <p>A <code>Graph</code> object is formed of the following fields:</p> field required type description id yes <code>string</code> the unique identifier for this graphnote that this value only has to be unique within the context of its parent (a Tab object). if you have two tabs, eg. downloads and tweets, it is completely fine for them to re-use the same id as this data exists on a per-tab basis. but you cannot re-use the same id value on two graphs the same Tab object type yes string(<code>text</code> | <code>line</code> | <code>country_table</code> | <code>world_map</code> | <code>hypothesis_table</code> | <code>tweets</code> | <code>list</code>) the type of graph to rendernote that some graphs support additional properties \u2014 please read the Types of Graphs for more details on these scopes usually* array(<code>string</code>) an array of scopes that will contribute to the data for this graphthe string in the array should match the name of a <code>scope</code> that exists in the configuration of this same Tab*some graphs (eg. Text) can work without any data, though most other graphs will not work as intended without at least one scope being provided config usually_ object some graphs require additional configuration, such as the Text graph requiring a <code>content</code> string*not all graphs require additional configuration, though you should refer to the documentation for the graph to see whether it requires any additional fields title no string the text to display above this graph options no object see below <p>Options Each graph has a configurable <code>options</code> object that allow you to configure it further. The <code>options</code> object, and all fields within it, can be considered optional.</p> field type description width number the percentage width this graph will render aswhen the widget is rendering graphs, it will automatically calculate rows based on the cumulative widths up to 100%. for instance, if three graphs are present with widths [30, 70, 50], the widget will render two rows \u2014 the first with two graphs (one 30% width and the next 70% width), and a second row with one graph (50% width)if this value is not specified, the graph\u2019s width will be set to whatever value is specified in the widget\u2019s <code>options.default_graph_width</code> configurationin some cases, having the widget automatically handle rows for you can create undesired effects. the widget also allows you to specify your own rows of graphs, which will be explained in the next subsection height string the string height this graph will haveyou must include the unit (eg. <code>px</code>) in this valueif this value is not specified, the graph will fall back to a default height hard-coded internally for the graphnote that if a graph has no data (causing the No data available message to display) the graph will render with an <code>auto</code> height value to prevent excessive whitespace maxHeight string the string <code>max-height</code> CSS property this graph will haveyou must include the unit (eg. <code>px</code>) in this valueif this value is not specified, the graph will fall back to a default height hard-coded internally for the graph (currently only the <code>list</code> graph has a default for this) class string a string of any CSS classes to attach to this graph <p>Configuration</p> <p>The global options object allows you to specify certain values that affect all graphs:</p> field type default value description default_graph_width number 100 the default percentage width of a graph if it does not have its own <code>width</code> property <p>Should you wish to modify the default values, you can override the value by adding the field into your widget configuration\u2019s <code>options</code> object.</p> <p>Some graphs support additional configuration, within a <code>config</code> object. The difference between the <code>config</code> and <code>options</code> objects, despite some graphs requiring both, is that <code>options</code> are general configurations that any graph can have, whilst <code>config</code> are configurations that are exclusive to that graph (eg. a Line Graph may support config options that a Text graph doesn\u2019t, but both will support the same <code>options</code>).</p>"},{"location":"metrics-docs/widget.en-GB/#text-text","title":"Text (<code>text</code>)","text":"<p>The text graph is the most generic graph as it simply renders text content in its place.</p> field type description content <code>string</code> the text content to display variable_regex <code>string</code> the <code>content</code> field supports the use of variables. this regex tells the widget what syntax to look for to replace variables.the default value is <code>{(.\\*?)}</code>, which will replace any text surrounded by curly braces, eg: <code>{name}</code> html_support string(<code>'none'</code>|<code>'safe'</code>|<code>'unsafe'</code>) when rendering the <code>content</code> field, HTML formatting will depend on the value provided:- <code>none</code> will not parse any HTML content- <code>safe</code> will parse HTML content using the dompurify library- <code>unsafe</code> will parse HTML without any sanitisationthe default value is <code>safe</code>. <p>Variables are supported within the <code>content</code> string, and is simply a key surrounded by a pattern, such as <code>{variable}</code>. By default the regex pattern is <code>{(.*?)}</code>, but this can be modified by overriding the <code>variable_regex</code> configuration on a per-graph basis.</p> <p>The following variables are supported:</p> variable description version returns the current version of the widget (eg. <code>1.0.3</code>) scope name if a variable name matches the name of one of the graph\u2019s scopes, it will render a formatted number representing the total count of that scopefor instance, if you have a <code>scopes</code> array of <code>[book_downloads, chapter_downloads]</code> and your <code>content</code> string were to say \u201cSome text: {book_downloads}\u201d, the widget would replace the <code>{book_downloads}</code> variable with the total count: \u201dSome text: 1,293\u201d"},{"location":"metrics-docs/widget.en-GB/#line-line","title":"Line (<code>line</code>)","text":"<p>The line graph will render a line graph of all scopes provided to it. Additional configuration allows you to control whether each scope will be merged together into a single line (the default behaviour), or to render as a \u201cstacked graph\u201d which has each scope drawn out separately.</p> <p>By default, the line graph will automatically calculate the most appropriate x-axis labels depending on the range of data available. The default logic (<code>\u2019auto'</code>) can be found in the <code>range</code> description of the table below.</p> <p>This ensures that you always receive a good amount of data being visualised without the graph becoming too slow. If for any reason you wish to change this behaviour, it can also be configured.</p> config default value description cumulative <code>true</code> if <code>true</code>, the line graph will always trend upwards as it combines all previous metrics together, eg:1 May: 10 (shown as 10 on the y-axis)2 May: 5 (shown as 15)3 May: 2 (shown as 17)if <code>false</code>, the graph\u2019s y-axis will correlate to the actual amount of metrics for the given date, eg:1 May: 10 (shown as 10 on the y-axis)2 May: 5 (shown as 5)3 May: 2 (shown as 2) stacked <code>false</code> if <code>true</code>, each individual scope provided to the graph will be rendered as its own unique line in a stacked graph. these lines can be styled by passing CSS variables into the widget, explained below.if <code>false</code>, every scope provided to the graph will be merged into a single line graph. range <code>'auto'</code> controls the x-axis labels for the graphif <code>'auto'</code>, the behaviour is as follows:\u2022 if no. of years &gt;=10, show years\u2022 else, if no. of months &gt;1, show months\u2022 else, show daysyou can instead specify a specific unit to show, such as <code>'years'</code>, <code>'months'</code>, or <code>'days'</code>.be advised that <code>'days'</code> can be a very expensive process if you have a lot of data, as it needs to calculate the values for every single day. begin_at_zero <code>false</code> if <code>true</code>, the graph\u2019s y-axis will always have a 0 present if <code>false</code>, the graph will start from a reasonable value within range of your smallest data point artificial_zero <code>false</code> if <code>true</code>, the graph will add an artificial 0 data point before every other data point (so long as the first data point isn\u2019t already 0). this data point will be given a date earlier than all other data points, and the date given depends on whether the x-axis should be displayed on a per-day basis or a per-month basisif per-day, the date of the artificial zero will be one day before the earliest data point. if per-month, the date of the artificial zero will be one month before the earliest data point background <code>'fill'</code> changes the style of the background to either:- <code>'gradient'</code>: a gradient fill will be set as the background- <code>'fill'</code>: a solid colour will be set as the background- <code>'none'</code>: there will be no background, just a border border_width <code>1</code> controls the width (a <code>number</code> in <code>px</code>) of the lines. <p>In the event a graph only has one data point, an artificial <code>0</code> will always be prefixed as an arbitrary data point to ensure something can be shown. This happens regardless of your <code>artificial_zero</code> config.</p>"},{"location":"metrics-docs/widget.en-GB/#styling","title":"Styling","text":"<p>The line graph uses the chart.js library for rendering, which renders a <code>canvas</code> element in the DOM. As such, styling of the graph cannot be done via conventional CSS.</p> <p>To support styling, the widget will check the widget\u2019s container element (the element that your <code>config.settings.element_id</code> defines (default <code>metrics-widget</code>)) for CSS variables:</p> variable fallback(s) description <code>--color-line-graph-x</code> <code>--color-primary</code>, <code>#506cd3</code> the colour of the line graph and its borderfor the border, this colour will be used directlyfor the gradient fill, this colour will have a maximum opacity of <code>0.6</code>the <code>x</code> must be replaced with a number, and must start from <code>1</code>, also increasing by <code>1</code> for every other colour. eg:<code>--color-line-graph-1: #506cd3;</code><code>--color-line-graph-2: #f5a623;</code>when the graph is rendered, starting with the first index (<code>--color-line-graph-1</code>), that colour will always be used. if you are using a stacked graph, meaning multiple lines will be rendered, each additional line will take the colour of the next index defined.note that the order of your <code>scopes</code> will also determine which order they appear in the graph, and thus determine which colour they are given."},{"location":"metrics-docs/widget.en-GB/#country-table-country_table","title":"Country Table (<code>country_table</code>)","text":"<p>The country table graph will display a key/value list of country names and their counts.</p> <p>It does not support any custom configuration.</p>"},{"location":"metrics-docs/widget.en-GB/#world-map-world_map","title":"World Map (<code>world_map</code>)","text":"<p>The world map graph will render a Mercator projection map with the more popular data points being represented by a darker fill colour.</p> <p>It does not support any custom configuration.</p>"},{"location":"metrics-docs/widget.en-GB/#styling_1","title":"Styling","text":"<p>The world map graph uses the jvectormap library for rendering, which renders a <code>canvas</code> element in the DOM. As such, styling of the graph cannot be done via conventional CSS.</p> <p>To support styling, the widget will check the widget\u2019s container element (the element that your <code>config.settings.element_id</code> defines (default <code>metrics-widget</code>)) for CSS variables:</p> variable fallback(s) description <code>--color-world-map</code> <code>--color-primary</code>, <code>#dbe1f6</code> the base colour of the map that all countries will be filled in asnote that CSS colour keywords (eg. <code>red</code>, <code>blue</code>, \u2026) may not work <code>--color-world-map-dark</code> <code>--color-secondary</code>, <code>#899de2</code> a darker hue of the primary map colour that will be used to represent a more popular data pointnote that CSS colour keywords (eg. <code>red</code>, <code>blue</code>, \u2026) may not work"},{"location":"metrics-docs/widget.en-GB/#hypothesis-table-hypothesis_table","title":"Hypothesis Table (<code>hypothesis_table</code>)","text":"<p>Renders a table element with Hypothesis data.</p> <p>It does not support any custom configuration.</p>"},{"location":"metrics-docs/widget.en-GB/#tweets-tweets","title":"Tweets (<code>tweets</code>)","text":"<p>Renders a list of tweets.</p> <p>The widget will display 4 tweets at a time followed by a \u201cload more\u201d button if there are more data points.</p> <p>In order to reduce load times, the widget will actually 4 more tweets on top of this, but will keep them hidden until the \u201cload more\u201d button is clicked. Once the button is clicked, the next 4 tweets will be loaded and hidden until the user clicks again.</p> <p>The graph does not support any custom configuration, but the number of tweets to display at once may be supported as a configuration option in the future.</p>"},{"location":"metrics-docs/widget.en-GB/#list-list","title":"List (<code>list</code>)","text":"<p>Renders a key-value list of data, particularly useful for metrics such as WordPress or Wikipedia.</p> <p>It\u2019s possible that you want to modify the \u201ckey\" display before rendering the list, such as changing \u201cmy_key_name\u201d to display as \u201cmy key name\u201d. This can be done by providing an optional <code>config</code> property to the graph:</p> config type description <code>name_regex</code> <code>string</code> the regular expression pattern containing a capture groupeg. the pattern <code>([^\\/]+$)</code> will match the last subdirectory in a URL <code>replacements</code> <code>object</code> a key-value list of everything that should be replaced by this matcheg. a key of <code>\"-\"</code> and value of <code>\"\"</code> will remove any hyphens found by the name_regex capture group"},{"location":"metrics-docs/widget.en-GB/#custom-rows","title":"Custom Rows","text":"<p>Each graph supports an optional <code>options.width</code> value which will determine what percentage width to render the graph as. If this is not specified, the width will be based on whatever is specified in the widget\u2019s <code>options.default_graph_width</code> configuration.</p> <p>In certain cases this may cause some undesired effects. As such, an additional configuration has been provided to allow you to manually specify your own rows.</p> <p>In order to define a row, your <code>graphs</code> array must contain a slightly different object, with the following properties:</p> field required type description <code>id</code> no <code>string</code> the id attribute to be added to the row <code>class</code> no <code>string</code> the class attribute to be added to the row <code>graphs</code> yes array(<code>Graph</code>) an array of Graphs to render within this row <p>When a custom row is defined, even if the row doesn\u2019t utilise 100% width, it will always be considered \u201ccomplete\u201d, and no more graphs will be added to it.</p> <p>For instance, if your custom row has a total graph width of 50%, and the next graph to render outside of this row has a width of of 50% as well, that graph would still start its own row rather than joining the custom row.</p> <p>This also works vice-versa: if your previous row wasn\u2019t a custom row, and your next row is a custom row which has graphs that would normally be able to fit inside that row, the widget will still render them as two separate rows.</p> <p>The final thing to note is that using custom rows isn\u2019t something that has to affect your whole configuration \u2014 it\u2019s perfectly fine to mix custom rows with automatic rows, like this:</p> <pre><code>{\n  // .. Tab object properties ..\n  \"graphs\": [\n\n        {\n            // id: \"\",    // we don't need to provide either of these properties for\n            // class: \"\", // the widget to know this is a user-controlled row...\n            \"graphs\": [   // &lt;-- ... since it's THIS property that defines it!\n                // ... any usual Graph object properties ...\n            ]\n        },\n\n        // ... any usual Graph object properties ...\n            // since it doesn't have a `graphs` property, the widget knows\n            // to automatically calculate this row on your behalf\n\n        {\n            \"id\": \"my-custom-row\",\n            \"graphs\": [ // &lt;-- the widget now knows this is a user-controlled row\n                    // ... any usual Graph object properties ...\n            ]\n        }\n  ]\n}\n</code></pre>"},{"location":"metrics-docs/widget.en-GB/#locales","title":"Locales","text":"<p>The widget aims to be as localisable as possible, and in many cases defers localisation to the browser automatically. This is the case for formatting dates, country names, and numbers (eg. <code>1200</code> \u21d2 <code>1,200</code> or <code>1.200</code>).</p> <p>Some translations within the widget (primarily ones that exist for accessibility) are hard-coded into the widget\u2019s localisation files, but can easily be extended and overwritten in the configuration.</p> <p>For other cases, the localisation is expected to be provided as part of a Tab or Graph, such as the <code>name</code> property on a Tab which determines what text will be rendered in the navigation bar or above an individual graph.</p> <p>If you need to overwrite any pre-defined localisations within the widget, you can provide a <code>locales</code> object in the root of the widget config JSON. The initial key value must be the language code you wish to override, and the value should be a nested object of all locale fields. As an example:</p> <pre><code>{\n    // .. your other config fields ..\n    \"locales\": {\n        \"en_GB\": {\n            \"loading\": \"Loading...\",\n            \"navigation\": {\n                \"label\": \"Navigation\"\n            },\n            \"graphs\": {\n                \"empty\": \"No data available\",\n                    \"hypothesis\": {\n                    \"date\": \"Date\",\n                    \"author\": \"Author\",\n                    \"summary\": \"Summary\"\n                },\n                \"tweets\": {\n                    \"load_more\": \"More tweets\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Refer to the en.json file in the widget source for the most up-to-date structure reference.</p> <p>To set the widget to use the language you defined, you simply need to set the <code>settings.locale</code> string to match whatever language code was in the root of your tree.</p> <p>You don\u2019t necessarily need to re-write the entire JSON tree structure, as the widget will automatically fallback to a supported language if no localisation is found.</p> <p>For instance, if you created a custom language overriding <code>loading</code> above, but didn\u2019t override <code>tweets.load_more</code>, the former would show in your overwritten language but the latter would show in the fallback language.</p> <p>Fallback</p> <p>If the widget can\u2019t find a localisation object in the <code>settings.locale</code> provided, it will fall back to the nearest possible supported language.</p> <p>The order of operations is:</p> <ol> <li>If there is an object in the <code>locales</code> object matching the <code>settings.locale</code>, return it.</li> <li>If the <code>settings.locale</code> code is 5 characters (eg. <code>en_US</code>), try to return an object with just the country code (eg. <code>en</code>) instead, if it exists in the <code>locales</code> object.</li> <li>Try to return the the user\u2019s specified <code>navigator.language</code> value, if it matches a language defined in the <code>locales</code> object.</li> <li>Render the widget in the default locale, <code>en_US</code>, which has hard-coded support.</li> </ol> <p>In the event that the widget does fall back to a different code than specified, it will output a warning into the browser console.</p> <p>Note that if you are adding 5-character-long language codes to your <code>locales</code> object (eg. <code>de_DE</code>, the widget will automatically add a dictionary mapping for the 2-character country code, so you don\u2019t need to add that manually. This means <code>de_DE</code> will be able to fall back to <code>de</code> automatically.</p> <p>The widget will prioritise this by adding the first language code found, so you should always order your <code>locales</code> objects by the most common locale first. For instance, if you had:</p> <ul> <li><code>de_DE</code></li> <li><code>de_AT</code></li> </ul> <p>\u2026and nothing else, the widget would copy the contents of <code>de_DE</code> into a dictionary for language code <code>de</code>. If the order was inverted, the widget would copy the contents of <code>de_AT</code> into a dictionary for <code>de</code>.</p> <p>Browser Behaviour</p> <p>In cases where the widget relies on the browser for localisations (numbers, dates, and country names), a configuration option exists in <code>settings.locale_fallback_type</code> which allows you to customise how this is handled. The value for <code>locale_fallback_type</code> must be either of the following, and defaults to <code>'mixed'</code>:</p> value description <code>'mixed'</code> in the event the provided <code>config.locale</code> is not supported and the widget must fall back to a different locale, browser localisations will still be formatted in whatever language code was provided to <code>config.locale</code>this will result in a mixed locale display, as you may have the widget text in one language but the numbers, dates, and country names in another <code>'supported'</code> in the event the provided <code>config.locale</code> is not supported and the widget must fall back to a different locale, browser localisations will also be formatted in the same locale that was fallen back to"},{"location":"metrics-docs/widget.en-GB/#events","title":"Events","text":"<p>The widget is designed to emit events at key points, which can be invaluable for making the widget fit your needs.</p>"},{"location":"metrics-docs/widget.en-GB/#event-types","title":"Event Types","text":"name arguments description widget_loading () emitted as soon as the widget is mounted in React and begins loading. widget_ready (tabs: an array of Configuration objects that were loaded into the graph) emitted as soon as the widget has finished loading and is ready to render. tab_panel_loading (tab: Configuration objects which is loading data) emitted once a tab begins loading its data. usually this happens after the tab is clicked, but may happen immediately if <code>options.load_graph_data_immediately</code> is <code>true</code>. tab_panel_ready (tab: Configuration objects which has finished loading data) emitted once a tab\u2019s content is fully ready. only emitted once for each tab. graph_loading (graph: Graph object which is loading) emitted once an individual graph begins loading. graph_ready (graph: Graph object which has finished loading data) emitted once an individual graph has finished loading."},{"location":"metrics-docs/widget.en-GB/#example","title":"Example","text":"<p>Here is an example illustrating every possible widget event, made possible by simply using a <code>&lt;script&gt;</code> tag on the same page as the widget:</p> <pre><code>&lt;script&gt;\n  // Store events to be called by the widget when it is ready\n  operaswidget.ready(w =&gt; {\n    w.events.on('widget_loading', () =&gt; {\n      console.log('the widget is loading');\n    });\n    w.events.on('widget_loading', () =&gt; {\n      console.log('the widget is loading again');\n    });\n    w.events.on('widget_ready', tabs =&gt; {\n      console.log('the widget has been loaded', tabs);\n    });\n    w.events.on('widget_ready', tabs =&gt; {\n      console.log('the widget has been loaded x2', tabs);\n    });\n    w.events.on('widget_ready', tabs =&gt; {\n      console.log('the widget has been loaded x3', tabs);\n    });\n    w.events.on('tab_panel_loading', tab =&gt; {\n      console.log('the panel is loading', tab);\n    });\n    w.events.on('tab_panel_ready', tab =&gt; {\n      console.log('the panel has been loaded', tab);\n    });\n    w.events.on('graph_loading', graph =&gt; {\n      console.log('the graph is loading', graph);\n    });\n    w.events.on('graph_ready', graph =&gt; {\n      console.log('the graph has been loaded', graph);\n    });\n  });\n&lt;/script&gt;\n</code></pre> <p>One notable feature here is that you can specify as many repeat events as possible, and each will be executed separately. For instance, there are three <code>widget_ready</code> listeners being defined, and each will be called sequentially once that event is triggered.</p>"},{"location":"metrics-docs/widget.en-GB/#use-case-example","title":"Use-case Example","text":"<p>One common use-case for widget events might be to hide the widget\u2019s container until it has finished loading. Since the widget doesn\u2019t know if it has any data until it has finished loading, you may not want to show anything until we know there is data to be shown.</p> <p>For example, let\u2019s say we have the following UI that we only want to show once we know there is data available.</p> <pre><code>&lt;section id=\"metrics-container\" class=\"widget loading\"&gt;\n  &lt;h1&gt;Metrics&lt;/h1&gt;\n  &lt;div id=\"metrics-widget\"&gt;&lt;/div&gt;\n&lt;/section&gt;\n</code></pre> <p>To do this, we could add some CSS so that <code>widget.loading</code> (the default state) will visually hide the widget. Then, we can simply add some JavaScript to listen to the <code>widget_ready</code> event to remove the <code>loading</code> class:</p> <pre><code>w.events.on('widget_ready', tabs =&gt; {\n  if (tabs.length) {\n    document.getElementById('metrics-container').classList.remove('loading');\n  }\n});\n</code></pre> <p>*Note you\u2019ll probably want to add additional accessible attributes like <code>aria-hidden</code>, but that\u2019s outside the scope of this documentation</p> <p>You could also build on this to show a specific message/component if the widget loads without data being available.</p>"},{"location":"metrics-docs/widget.en-GB/#theming","title":"Theming","text":"<p>The widget is designed to be as customisable as possible.</p> <p>Almost, if not every, DOM element in the graph will have its own custom class name. All class names are prefixed with <code>mw__</code> to prevent any style conflict clashes with your existing set up.</p> <p>In the majority of cases, you can theme the widget by simply overriding the class of the element you wish to style.</p> <p>CSS Variables</p> <p>Some aspects of the widget, such as graphs that rely on a <code>canvas</code> element, cannot be modified directly by CSS. In order to still support styling, in addition to making it easier to provide a default theme, you can define CSS Variables to style the widget.</p> <p>The CSS selector that renders these variables must be placed on the widget\u2019s container element (the element that your <code>config.settings.element_id</code> defines (default <code>metrics-widget</code>)).</p> <p>For example, if your widget is loaded into <code>&lt;div id='metrics-widget'&gt;</code>, you will want to create a <code>#metrics-widget</code> CSS selector to define the variables.</p> <p>This is due to the fact that the <code>canvas</code>-based graphs do not inherit colours, but instead specifically seek out specific CSS variables within the widget container element.</p> variable default description <code>--color-primary</code> <code>#506cd3</code> mainly used to set the colour of the navigation countsis also used as a backup by all graphs, if a more specific variable is not present <code>--color-primary-light</code> <code>#edf0fb</code> a lighter colour of your <code>--color-primary</code> variablemainly used as a background of the active navigation option <code>--color-primary-dark</code> <code>#506bd3</code> a darker colour of your <code>--color-primary</code> variablemainly used as an outline of the active navigation option (when focused) <code>--color-world-map</code> <code>#dbe1f6</code> see Graph object <code>--color-world-map-dark</code> <code>#899de2</code> see Graph object <code>---color-line-graph-x</code> <code>#506cd3</code> see Graph object <p>Here is an example of how you would use the CSS variables:</p> <pre><code>#metrics-widget {\n  --color-primary: #506cd3; /* [1] */\n  --color-primary-light: #edf0fb; /* [2] */\n  --color-primary-dark: #506bd3; /* [3] */\n  --color-world-map: #dbe1f6; /* [4] */\n  --color-world-map-dark: #899de2; /* [5] */\n  --color-line-graph-1: #4b7094; /* [6] */\n  --color-line-graph-2: #70944b; /* [7] */\n  --color-line-graph-3: #944b70; /* [8] */\n  --color-line-graph-4: #94704b; /* [9] */\n}\n</code></pre> <p></p> <p>Whilst all browsers should support CSS Variables, you are welcome to completely ignore them and manually override the individual widget classes in your own stylesheets.</p> <p>Alternatively, the widget will still fully function even if you choose to not import the default <code>widget.css</code> file at all and opt to completely style it manually.</p>"},{"location":"metrics-docs/widget.en-GB/#development","title":"Development","text":""},{"location":"metrics-docs/widget.en-GB/#installation","title":"Installation","text":"<ol> <li>Use <code>yarn</code> to install the necessary dependencies.</li> <li>Run <code>yarn start</code> to start the development server.</li> </ol>"},{"location":"metrics-docs/widget.en-GB/#building","title":"Building","text":"<ol> <li>Run <code>yarn lint</code> to make sure there are no linting issues.</li> <li>Update the version in the <code>package.json</code> file. Sub-versions can be denoted using hyphens, such as <code>1.0.0-beta.12</code>.</li> <li>Run <code>yarn build</code> to build the application. This must be done after changing the version.</li> </ol>"},{"location":"metrics-docs/widget.en-GB/#deploying","title":"Deploying","text":"<ol> <li>Visit the metrics-widget Bucket.</li> <li>If this is not a new major version, enter the <code>vX</code> folder representing your major version.</li> <li>If this is a new major version, create a new <code>vX</code> folder for your version, enter it, and create a <code>latest</code> folder inside that directory.</li> <li>Create another folder named exactly after the version of your release.    Eg: <code>1.0.2</code> or <code>1.0.2-alpha.3</code></li> <li>Upload all files from the <code>dist</code> folder of your build into that directory.</li> <li>In the <code>latest</code> folder, upload all files from the <code>dist</code> folder of your build.</li> <li>If the major version was increased, update the Getting Started URL to point to the new version.</li> <li>\ud83d\udea8\u00a0Be sure to update the JavaScript and CSS code snippets.</li> </ol> <p>You may want to inform users about this new release, as not all will be using the <code>latest</code> \u201dversion\u201d directory.</p> <p>If you released a new major version, users using <code>latest</code> will not be upgraded to that automatically.</p>"}]}